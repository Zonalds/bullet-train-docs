{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Bullet Train lets you manage features across web, mobile and server side applications. Bullet Train is 100% Open Source. Host yourself or let us take care of the hosting. The application consist of 3 components: The Server-Side REST API . The Front End Administration Web Interface . Client Libraries. To get up and running, you can either use https://bullet-train.io/ for 1 and 2 above, or you can self host the API and Front End. Once you have these components up and running, you can add the client libraries to your apps and start managing your features remotely. Installation Server Side API The source code and installation instructions can be found at the GitHub project . The API is written in Python and is based on Django and the Django Rest Framework. Front End Website The source code and installation instructions can be found at the GitHub project . The Front End Website is written in React/Javascript and requires NodeJS. Client Libraries Once you are setup with the front and back end, you can integrate our client libraries within your apps. Javascript and React/React Native NodeJS Android iOS Java Python Ruby .Net REST Javascript framework examples Examples applications for popular JS frameswork can be found here: JS framework examples What Next Find out more about Managing Features","title":"Overview and Install"},{"location":"#overview","text":"Bullet Train lets you manage features across web, mobile and server side applications. Bullet Train is 100% Open Source. Host yourself or let us take care of the hosting. The application consist of 3 components: The Server-Side REST API . The Front End Administration Web Interface . Client Libraries. To get up and running, you can either use https://bullet-train.io/ for 1 and 2 above, or you can self host the API and Front End. Once you have these components up and running, you can add the client libraries to your apps and start managing your features remotely.","title":"Overview"},{"location":"#installation","text":"","title":"Installation"},{"location":"#server-side-api","text":"The source code and installation instructions can be found at the GitHub project . The API is written in Python and is based on Django and the Django Rest Framework.","title":"Server Side API"},{"location":"#front-end-website","text":"The source code and installation instructions can be found at the GitHub project . The Front End Website is written in React/Javascript and requires NodeJS.","title":"Front End Website"},{"location":"#client-libraries","text":"Once you are setup with the front and back end, you can integrate our client libraries within your apps. Javascript and React/React Native NodeJS Android iOS Java Python Ruby .Net REST","title":"Client Libraries"},{"location":"#javascript-framework-examples","text":"Examples applications for popular JS frameswork can be found here: JS framework examples","title":"Javascript framework examples"},{"location":"#what-next","text":"Find out more about Managing Features","title":"What Next"},{"location":"ab-testing/","text":"A/B Testing A/B testing enables you to expirement with design and functionality variants of your application. The data generated will allow you to make modifications to your app, safe in the knowledge that it will have a net postive effect. You can use Bullet Train to perform A/B Testing. Using a combination of Bullet Trains Segments and a 3rd party analytics tool like Google Analytics or Mixpanel , you can generate the relevant data to perform the A/B test. Overview For this example, lets assume we have an app that currently accepts Credit Card payments only. We have a hunch that we are losing out on potential customers that would like to pay with Paypal. We're going to test whether adding Paypal to the payment options increases our checkout rate. In order to perform an A/B Test, we need to complete the following steps: Create a new Feature Flag that will control whether the user sees the Paypal Button or not. We'll call this flag \"Paypal Checkout Enabled\". Create a new Segment, called \"Paypal Checkout Enabled\", with 1 Rule: Include users with a % Split figure of 50. In our app, we want to Identify each user before they start the checkout process. All Bullet Train Segments need us to Identify the user, so we can uniquely identify them. When we get to the checkout page, check the state of the \"Paypal Checkout Enabled\" flag for that user. If it is enabled, show the Paypal payment button. Send a message to the Analytics platform, adding the name/value pair of \"Paypal Checkout Enabled\" and the value of the flag. Deploy your app and watch the data come in. Example We made a repo with a JSFiddle that demonstrates an A/B Test using Javascript.","title":"A/B Testing"},{"location":"ab-testing/#ab-testing","text":"A/B testing enables you to expirement with design and functionality variants of your application. The data generated will allow you to make modifications to your app, safe in the knowledge that it will have a net postive effect. You can use Bullet Train to perform A/B Testing. Using a combination of Bullet Trains Segments and a 3rd party analytics tool like Google Analytics or Mixpanel , you can generate the relevant data to perform the A/B test.","title":"A/B Testing"},{"location":"ab-testing/#overview","text":"For this example, lets assume we have an app that currently accepts Credit Card payments only. We have a hunch that we are losing out on potential customers that would like to pay with Paypal. We're going to test whether adding Paypal to the payment options increases our checkout rate. In order to perform an A/B Test, we need to complete the following steps: Create a new Feature Flag that will control whether the user sees the Paypal Button or not. We'll call this flag \"Paypal Checkout Enabled\". Create a new Segment, called \"Paypal Checkout Enabled\", with 1 Rule: Include users with a % Split figure of 50. In our app, we want to Identify each user before they start the checkout process. All Bullet Train Segments need us to Identify the user, so we can uniquely identify them. When we get to the checkout page, check the state of the \"Paypal Checkout Enabled\" flag for that user. If it is enabled, show the Paypal payment button. Send a message to the Analytics platform, adding the name/value pair of \"Paypal Checkout Enabled\" and the value of the flag. Deploy your app and watch the data come in.","title":"Overview"},{"location":"ab-testing/#example","text":"We made a repo with a JSFiddle that demonstrates an A/B Test using Javascript.","title":"Example"},{"location":"audit-logs/","text":"Audit Logs Every action taken within the Bullet Train adminstration application is tracked and logged. This allows you to easily retrace the events and values that flags, identities and segments have taken over time. You can view the Audit Log within the Bullet Train application, and filter it in order to find the information you are after.","title":"Audit Logs"},{"location":"audit-logs/#audit-logs","text":"Every action taken within the Bullet Train adminstration application is tracked and logged. This allows you to easily retrace the events and values that flags, identities and segments have taken over time. You can view the Audit Log within the Bullet Train application, and filter it in order to find the information you are after.","title":"Audit Logs"},{"location":"hosted-service/","text":"Hosted Service If you would rather skip the hosting and jump straight to integrating Bullet Train with your own application, you can use https://bullet-train.io/ right now. We have paid plans with pricing to suit both startups and enterprise customers alike. If you want to discuss hosting options, please get in touch .","title":"Hosted Service"},{"location":"hosted-service/#hosted-service","text":"If you would rather skip the hosting and jump straight to integrating Bullet Train with your own application, you can use https://bullet-train.io/ right now. We have paid plans with pricing to suit both startups and enterprise customers alike. If you want to discuss hosting options, please get in touch .","title":"Hosted Service"},{"location":"managing-features/","text":"Feature Flags Feature Flags are a development methodology that allow you to ship code and features before they are finished. This greatly benefits Continuous Integration and Continuous Deployment (CI/CD). The typical workflow for this is as follows. You are about to start work on a new feature. Lets imaging you are going to implement a sharing button with your application. Create a new Feature Flag in Bullet Train, calling it \"sharing_button\". Set it to enabled on your development environment, and disabled on your production environment. Start working on the feature. Whenever you write code that shows the button within the UI, wrap it in a conditional statement, testing against the value of the flag \"sharing button\". Only show the button if the flag is set to True. Because your button only shows when the \"sharing_button\" flag is set to True, you are safe to commit your code as you work on the feature. Your code will be live within the production platform, but the functionality is hidden behind the flag. Once you are happy with your Feature, you can enable the \"sharing_button\" for other members of your team and with Beta testers. If everything is working as intended, simply flip the \"sharing_button\" flag to True for everyone in your production environment, and your feature is rolled out. If you want to learn more about Feature Flags, Flickr wrote the seminal blog post on it in 2009. Flags within Bullet Train can be defined either as a boolean value, or as a String of text. This allows you to use Bullet Train in the multiple ways. Showing and hiding features in your application. E.g. A sharing button within an application. Configuring values used within your application remotely. E.g. The number of power-ups a user might have in a game. Configuring environment variables. E.g. Setting the database URL for your API. Features are created on a per project basis but edited per environment and can then be overridden on a per user basis. Organisations Organisations are a way for you and other team members to manage projects and their features. Users can be members of multiple organisations. Projects Projects contain one or more environments that share a single set of features and one or more environments. Organisations can have any number of projects. Environments Environments are a way to separate the configuration of your features. For example, your project's Development and Staging environments might have a feature configured as on while it is turned off in your Production environment. A project can have any number of environments. Identities Identities are a particular user registration for one of your Project's environments. Registering identities within the client application allows you to manage features for individual users. Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment. For more info see Identities . Traits You can store any number of Traits against an Identity. Traits are simple name:value pairs that can store any type of data. Some examples of traits that you might store against an Identity might be: The number of times the user has logged in. If they have accepted the application terms and conditions. Their preference for application theme. If they have performed certain actions within your application. For more info see Traits . Segments Segments are a way to define a group of users by traits such as number of times logged in, device, location or any number of custom defined traits. Similarly to individual users, you will be able to override environment defaults for features. For example showing certain features for a \"power user\" segment. For more info see Segments .","title":"Managing Features"},{"location":"managing-features/#feature-flags","text":"Feature Flags are a development methodology that allow you to ship code and features before they are finished. This greatly benefits Continuous Integration and Continuous Deployment (CI/CD). The typical workflow for this is as follows. You are about to start work on a new feature. Lets imaging you are going to implement a sharing button with your application. Create a new Feature Flag in Bullet Train, calling it \"sharing_button\". Set it to enabled on your development environment, and disabled on your production environment. Start working on the feature. Whenever you write code that shows the button within the UI, wrap it in a conditional statement, testing against the value of the flag \"sharing button\". Only show the button if the flag is set to True. Because your button only shows when the \"sharing_button\" flag is set to True, you are safe to commit your code as you work on the feature. Your code will be live within the production platform, but the functionality is hidden behind the flag. Once you are happy with your Feature, you can enable the \"sharing_button\" for other members of your team and with Beta testers. If everything is working as intended, simply flip the \"sharing_button\" flag to True for everyone in your production environment, and your feature is rolled out. If you want to learn more about Feature Flags, Flickr wrote the seminal blog post on it in 2009. Flags within Bullet Train can be defined either as a boolean value, or as a String of text. This allows you to use Bullet Train in the multiple ways. Showing and hiding features in your application. E.g. A sharing button within an application. Configuring values used within your application remotely. E.g. The number of power-ups a user might have in a game. Configuring environment variables. E.g. Setting the database URL for your API. Features are created on a per project basis but edited per environment and can then be overridden on a per user basis.","title":"Feature Flags"},{"location":"managing-features/#organisations","text":"Organisations are a way for you and other team members to manage projects and their features. Users can be members of multiple organisations.","title":"Organisations"},{"location":"managing-features/#projects","text":"Projects contain one or more environments that share a single set of features and one or more environments. Organisations can have any number of projects.","title":"Projects"},{"location":"managing-features/#environments","text":"Environments are a way to separate the configuration of your features. For example, your project's Development and Staging environments might have a feature configured as on while it is turned off in your Production environment. A project can have any number of environments.","title":"Environments"},{"location":"managing-features/#identities","text":"Identities are a particular user registration for one of your Project's environments. Registering identities within the client application allows you to manage features for individual users. Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment. For more info see Identities .","title":"Identities"},{"location":"managing-features/#traits","text":"You can store any number of Traits against an Identity. Traits are simple name:value pairs that can store any type of data. Some examples of traits that you might store against an Identity might be: The number of times the user has logged in. If they have accepted the application terms and conditions. Their preference for application theme. If they have performed certain actions within your application. For more info see Traits .","title":"Traits"},{"location":"managing-features/#segments","text":"Segments are a way to define a group of users by traits such as number of times logged in, device, location or any number of custom defined traits. Similarly to individual users, you will be able to override environment defaults for features. For example showing certain features for a \"power user\" segment. For more info see Segments .","title":"Segments"},{"location":"managing-identities/","text":"Identities Identities are created within Bullet Train automatically the first time they are identified from your client SDKs. Generally you'd make a call to identify a user with a unique string/id whenever they log into your app/site. Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment. Identity Feature Flags By default, Identities receive the default flags for their environment. The main use for identities is to be able to override flags and configs on a per-identity basis. You can do this by navigating to the Users page, finding the user and modifying their flags. Identity Traits You can also use Bullet Train to store 'Traits' against identities. Traits are simply key/value pairs that are associated with individual Identities. Traits can be used to store additional data about your users that would be cumbersome to store within your application. Some possible uses for traits could be: Storing whether the user has accepted a new set of terms and conditions. Storing the last viewed page of the application so that you can resume the users place later, across any device. Generally if they are lower-value pieces of information about your user, it might be simpler/easier to store them in Bullet Train rather than in your core application. Traits are stored natively as either numbers, strings or booleans. Traits powering Segments Traits can be used within your application, but they also be used to power Segments .","title":"Managing Identities"},{"location":"managing-identities/#identities","text":"Identities are created within Bullet Train automatically the first time they are identified from your client SDKs. Generally you'd make a call to identify a user with a unique string/id whenever they log into your app/site. Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.","title":"Identities"},{"location":"managing-identities/#identity-feature-flags","text":"By default, Identities receive the default flags for their environment. The main use for identities is to be able to override flags and configs on a per-identity basis. You can do this by navigating to the Users page, finding the user and modifying their flags.","title":"Identity Feature Flags"},{"location":"managing-identities/#identity-traits","text":"You can also use Bullet Train to store 'Traits' against identities. Traits are simply key/value pairs that are associated with individual Identities. Traits can be used to store additional data about your users that would be cumbersome to store within your application. Some possible uses for traits could be: Storing whether the user has accepted a new set of terms and conditions. Storing the last viewed page of the application so that you can resume the users place later, across any device. Generally if they are lower-value pieces of information about your user, it might be simpler/easier to store them in Bullet Train rather than in your core application. Traits are stored natively as either numbers, strings or booleans.","title":"Identity Traits"},{"location":"managing-identities/#traits-powering-segments","text":"Traits can be used within your application, but they also be used to power Segments .","title":"Traits powering Segments"},{"location":"managing-segments/","text":"Segments Segments allow you to group your users based on a set of rules, and then control Feature Flags and Remote Config for those groups. You can create a Segment and then override a Feature Flag state or Remote Config value for that segment of users. Example - Beta Users Let's say that you want all your team to automatically be defined as Beta Users . Right now, all your logged in users are identified with their email address along with some other traits . You create a new Segment, call it Beta Users , and define a single rule: email_address contains @bullet-train.io Once the Segment has been defined, you can then associate that Segment with a specific Feature Flag. To do this, edit the Feature Flag that you want to connect our Segment to. You then have the option of connecting a Segment to the Feature. If the Identified user is a member of that Segment, the flag will be overridden. For all the Feature Flags that relate to Beta features, you can associate this Beta Users segment with each Flag, and set the Flag value to true for that Segment. To do this, edit the Feature Flag and select the segment in the 'Segment Overrides' drop down. At this point, all users who log in with an email address that contains @bullet-train.io will have all Beta features enabled. Let's say that you then partner with another company who need access to all Beta features. You can then simply modify the Segment rules: email_address contains @bullet-train.io email_address contains @solidstategroup.com Now all users who log in with a @solidstategroup.com email address are automatically included in beta features. Feature Flag and Remote Config Precedence Feature Flag states and Remote Config values can be defined in 3 different places: The default Flag/Config value itself The Segment associated with the Flag/Config Overridden at an Identity level For example, a Feature Flag Show Paypal Checkout could be set to false on the Flag itself, true in the Beta Users segment, and then overridden as false for a specific Identity. In order to deal with this situation, there is an order of priority: If the Identity has an override value, this is returned ahead of Segments and Flags/Config If there's no Identity override, the Segment is checked and returned if valid If no Identity or Segment overrides the value, the default Flag/Config value is used More simply, the order of precendence is: Identity Segment Flag","title":"Managing Segments"},{"location":"managing-segments/#segments","text":"Segments allow you to group your users based on a set of rules, and then control Feature Flags and Remote Config for those groups. You can create a Segment and then override a Feature Flag state or Remote Config value for that segment of users.","title":"Segments"},{"location":"managing-segments/#example-beta-users","text":"Let's say that you want all your team to automatically be defined as Beta Users . Right now, all your logged in users are identified with their email address along with some other traits . You create a new Segment, call it Beta Users , and define a single rule: email_address contains @bullet-train.io Once the Segment has been defined, you can then associate that Segment with a specific Feature Flag. To do this, edit the Feature Flag that you want to connect our Segment to. You then have the option of connecting a Segment to the Feature. If the Identified user is a member of that Segment, the flag will be overridden. For all the Feature Flags that relate to Beta features, you can associate this Beta Users segment with each Flag, and set the Flag value to true for that Segment. To do this, edit the Feature Flag and select the segment in the 'Segment Overrides' drop down. At this point, all users who log in with an email address that contains @bullet-train.io will have all Beta features enabled. Let's say that you then partner with another company who need access to all Beta features. You can then simply modify the Segment rules: email_address contains @bullet-train.io email_address contains @solidstategroup.com Now all users who log in with a @solidstategroup.com email address are automatically included in beta features.","title":"Example - Beta Users"},{"location":"managing-segments/#feature-flag-and-remote-config-precedence","text":"Feature Flag states and Remote Config values can be defined in 3 different places: The default Flag/Config value itself The Segment associated with the Flag/Config Overridden at an Identity level For example, a Feature Flag Show Paypal Checkout could be set to false on the Flag itself, true in the Beta Users segment, and then overridden as false for a specific Identity. In order to deal with this situation, there is an order of priority: If the Identity has an override value, this is returned ahead of Segments and Flags/Config If there's no Identity override, the Segment is checked and returned if valid If no Identity or Segment overrides the value, the default Flag/Config value is used More simply, the order of precendence is: Identity Segment Flag","title":"Feature Flag and Remote Config Precedence"},{"location":"staged-feature-rollouts/","text":"Staged Feature Rollouts What are Staged Feature Rollouts Staged Feature Rollouts allow you to test a new feature with a small subset of your user base. If you are happy with the feature, you can increase the percentage of users that see the feature until it is available to your entire user base. This method can increase your confidence in rolling out a new feature. If there are issues with the rollout, you can simply disable the Feature Flag, thus hiding the feature within your application. Creating Staged Rollouts You can achieve staged rollouts by creating a Segment and adding a rule defined with the \"% Split\" condition. Specifying a \"% Split\" value between 1 and 100 then defines what percentage of your user base are included within this Segment. Once you have created the Segment, you can then go ahead and connect it up to a Feature Flag as per regular Segments . Note that you can include the \"% Split\" rule alongside other Segment rules if you wish. How does it work Every Identity/Segment combination is combined and then hashed, and a floating point value between 0.0 and 1.0 is generated from this hash. This value is then evaluated against the \"% Split\" rule.","title":"Staged Feature Rollouts"},{"location":"staged-feature-rollouts/#staged-feature-rollouts","text":"","title":"Staged Feature Rollouts"},{"location":"staged-feature-rollouts/#what-are-staged-feature-rollouts","text":"Staged Feature Rollouts allow you to test a new feature with a small subset of your user base. If you are happy with the feature, you can increase the percentage of users that see the feature until it is available to your entire user base. This method can increase your confidence in rolling out a new feature. If there are issues with the rollout, you can simply disable the Feature Flag, thus hiding the feature within your application.","title":"What are Staged Feature Rollouts"},{"location":"staged-feature-rollouts/#creating-staged-rollouts","text":"You can achieve staged rollouts by creating a Segment and adding a rule defined with the \"% Split\" condition. Specifying a \"% Split\" value between 1 and 100 then defines what percentage of your user base are included within this Segment. Once you have created the Segment, you can then go ahead and connect it up to a Feature Flag as per regular Segments . Note that you can include the \"% Split\" rule alongside other Segment rules if you wish.","title":"Creating Staged Rollouts"},{"location":"staged-feature-rollouts/#how-does-it-work","text":"Every Identity/Segment combination is combined and then hashed, and a floating point value between 0.0 and 1.0 is generated from this hash. This value is then evaluated against the \"% Split\" rule.","title":"How does it work"},{"location":"system-administration/","text":"System Administration Web Hooks You can use the Web Hooks to send events from Bullet Train into your own infrastructure. Web Hooks are managed at an Environment level, and can be configured in the Environment settings page. Currently the following events will generate a Web Hook action: Creating Flags Updating Flag state (both Flags and Remote Config) Deleting Flags You can define any number of Web Hook endpoints per Environment. Web Hooks can be managed from the Environment settings page. A typical use case for Web Hooks is if you want to cache flag state locally within your server environment. Each event generates an HTTP POST with the following body payload to each of the Web Hooks defined within that Environment: { \"data\": { \"changed_by\": \"Admin User\", \"new_state\": { \"enabled\": true, \"environment\": 33, \"feature\": { \"created_date\": \"2019-12-11T15:47:26.959385Z\", \"default_enabled\": true, \"description\": null, \"id\": 33, \"initial_value\": null, \"name\": \"your_feature_name\", \"project\": 33, \"type\": \"FLAG\" }, \"feature_segment\": null, \"feature_state_value\": null, \"id\": 33, \"identity\": 58234, \"identity_identifier\": \"user@domain.com\" }, \"timestamp\": \"2019-12-11T15:47:26.973Z\" }, \"event_type\": \"FLAG_UPDATED\" } Full API Access The client SDK libraries are designed solely for end client use, and do not have an interface to the full Bullet Train API. However, you can easily access the full API by generating a login token and sending that with your API requests. To generate a login token, send an HTTP POST to https://api.bullet-train.io/auth/login with the following JSON payload: curl -X \"POST\" \"https://api.bullet-train.io/v1/auth/login/\" \\ -H 'Content-Type: application/json; charset=utf-8' \\ -d $'{ \"username\": \"<admin username>\", \"password\": \"<admin password>\" }' This will generate a token (that does not expire) which you can then use with subsequent API calls. You can pass this token in the HTTP header with Token <token> Permissions and User Roles There are currently 2 different role type available when managing the application. We will be rolling out fine grained user permissions in a future release. Admin Role The Admin Role can perform all actions within the application, including the management of users who have access to the Bullet Train administrative console. Standard User The Standard User can perform all actions within the application, but they cannot manage users within the Bullet Train administrative console.","title":"System Administration"},{"location":"system-administration/#system-administration","text":"","title":"System Administration"},{"location":"system-administration/#web-hooks","text":"You can use the Web Hooks to send events from Bullet Train into your own infrastructure. Web Hooks are managed at an Environment level, and can be configured in the Environment settings page. Currently the following events will generate a Web Hook action: Creating Flags Updating Flag state (both Flags and Remote Config) Deleting Flags You can define any number of Web Hook endpoints per Environment. Web Hooks can be managed from the Environment settings page. A typical use case for Web Hooks is if you want to cache flag state locally within your server environment. Each event generates an HTTP POST with the following body payload to each of the Web Hooks defined within that Environment: { \"data\": { \"changed_by\": \"Admin User\", \"new_state\": { \"enabled\": true, \"environment\": 33, \"feature\": { \"created_date\": \"2019-12-11T15:47:26.959385Z\", \"default_enabled\": true, \"description\": null, \"id\": 33, \"initial_value\": null, \"name\": \"your_feature_name\", \"project\": 33, \"type\": \"FLAG\" }, \"feature_segment\": null, \"feature_state_value\": null, \"id\": 33, \"identity\": 58234, \"identity_identifier\": \"user@domain.com\" }, \"timestamp\": \"2019-12-11T15:47:26.973Z\" }, \"event_type\": \"FLAG_UPDATED\" }","title":"Web Hooks"},{"location":"system-administration/#full-api-access","text":"The client SDK libraries are designed solely for end client use, and do not have an interface to the full Bullet Train API. However, you can easily access the full API by generating a login token and sending that with your API requests. To generate a login token, send an HTTP POST to https://api.bullet-train.io/auth/login with the following JSON payload: curl -X \"POST\" \"https://api.bullet-train.io/v1/auth/login/\" \\ -H 'Content-Type: application/json; charset=utf-8' \\ -d $'{ \"username\": \"<admin username>\", \"password\": \"<admin password>\" }' This will generate a token (that does not expire) which you can then use with subsequent API calls. You can pass this token in the HTTP header with Token <token>","title":"Full API Access"},{"location":"system-administration/#permissions-and-user-roles","text":"There are currently 2 different role type available when managing the application. We will be rolling out fine grained user permissions in a future release.","title":"Permissions and User Roles"},{"location":"system-administration/#admin-role","text":"The Admin Role can perform all actions within the application, including the management of users who have access to the Bullet Train administrative console.","title":"Admin Role"},{"location":"system-administration/#standard-user","text":"The Standard User can perform all actions within the application, but they cannot manage users within the Bullet Train administrative console.","title":"Standard User"},{"location":"clients/android/","text":"Android Client You can use the Java Client to run Bullet Train within native Android applications.","title":"Android"},{"location":"clients/android/#android-client","text":"You can use the Java Client to run Bullet Train within native Android applications.","title":"Android Client"},{"location":"clients/dotnet/","text":"This SDK can be used for .NET Core, .NET Framework, Mono, Xamarin and Universal Windows Platform applications. The source code for the client is available on Github . Getting Started Quick Setup The client library is available from NuGet and can be added to your project by many tools. You can find the package here https://www.nuget.org/packages/BulletTrain/ Usage Retrieving feature flags for your project For full documentation visit https://docs.bullet-train.io Sign Up and create account at https://bullet-train.io/ In your application initialise the Bullet Train client with your environment API key BulletTrainClient bulletClient = new BulletTrainClient() { environmentKey: \"<environment-key-here>\" }; To check if a feature flag exists and is enabled: bool featureEnabled = await bulletClient.HasFeatureFlag(\"my_test_feature\"); if (featureEnabled) { // run the code to execute enabled feature } else { // run the code if feature switched off } To get a remote config feature value: string myRemoteConfig = await bulletClient.GetFeatureValue(\"my_test_feature\"); if (myRemoteConfig != null) { // run the code to use remote config value } else { // run the code without remote config } Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . To check if a feature exists and is enabled for a specific user: bool featureEnabled = await bulletClient.HasFeatureFlag(\"my_test_feature\", \"my_user_id\"); if (featureEnabled) { // run the code to execute enabled feature for given user } else { // run the code when feature switched off } To get a remote config value for specific user: string myRemoteConfig = await bulletClient.GetFeatureValue(\"my_test_feature\", \"my_user_id\"); if (myRemoteConfig != null) { // run the code to use remote config value } else { // run the code without remote config } To get user traits: List<Trait> userTraits = await bulletClient.GetTraits(\"my_user_id\") if (userTraits != null && userTraits) { // run the code to use user traits } else { // run the code without user traits } To get a specific user trait: Trait userTrait = await bulletClient.GetTrait(\"my_user_id\", \"cookies_key\"); if (userTrait != null) { // run the code to use user trait } else { // run the code without user trait } To get filtered user traits: List<Trait> userTraits = await bulletClient.GetTraits(\"my_user_id\", new List<string> { \"specific_key\", /* rest of elements */ }); if (userTraits != null) { // run the code to use user traits } else { // run the code without user traits } To set or update a user trait: Trait userTrait = await bulletClient.SetTrait(\"my_user_id\", \"my_user_trait\", \"blue\"); To retrieve a user identity (both features and traits): Identity userIdentity = await bulletClient.GetUserIdentity(\"my_user_id\"); if (userIdentity != null) { // Run the code to use user identity i.e. userIdentity.flags or userIdentity.traits } Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Getting Help If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. Get in touch If you have any questions about our projects you can email projects@solidstategroup.com .","title":".Net"},{"location":"clients/dotnet/#getting-started","text":"","title":"Getting Started"},{"location":"clients/dotnet/#quick-setup","text":"The client library is available from NuGet and can be added to your project by many tools. You can find the package here https://www.nuget.org/packages/BulletTrain/","title":"Quick Setup"},{"location":"clients/dotnet/#usage","text":"Retrieving feature flags for your project For full documentation visit https://docs.bullet-train.io Sign Up and create account at https://bullet-train.io/ In your application initialise the Bullet Train client with your environment API key BulletTrainClient bulletClient = new BulletTrainClient() { environmentKey: \"<environment-key-here>\" }; To check if a feature flag exists and is enabled: bool featureEnabled = await bulletClient.HasFeatureFlag(\"my_test_feature\"); if (featureEnabled) { // run the code to execute enabled feature } else { // run the code if feature switched off } To get a remote config feature value: string myRemoteConfig = await bulletClient.GetFeatureValue(\"my_test_feature\"); if (myRemoteConfig != null) { // run the code to use remote config value } else { // run the code without remote config } Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . To check if a feature exists and is enabled for a specific user: bool featureEnabled = await bulletClient.HasFeatureFlag(\"my_test_feature\", \"my_user_id\"); if (featureEnabled) { // run the code to execute enabled feature for given user } else { // run the code when feature switched off } To get a remote config value for specific user: string myRemoteConfig = await bulletClient.GetFeatureValue(\"my_test_feature\", \"my_user_id\"); if (myRemoteConfig != null) { // run the code to use remote config value } else { // run the code without remote config } To get user traits: List<Trait> userTraits = await bulletClient.GetTraits(\"my_user_id\") if (userTraits != null && userTraits) { // run the code to use user traits } else { // run the code without user traits } To get a specific user trait: Trait userTrait = await bulletClient.GetTrait(\"my_user_id\", \"cookies_key\"); if (userTrait != null) { // run the code to use user trait } else { // run the code without user trait } To get filtered user traits: List<Trait> userTraits = await bulletClient.GetTraits(\"my_user_id\", new List<string> { \"specific_key\", /* rest of elements */ }); if (userTraits != null) { // run the code to use user traits } else { // run the code without user traits } To set or update a user trait: Trait userTrait = await bulletClient.SetTrait(\"my_user_id\", \"my_user_trait\", \"blue\"); To retrieve a user identity (both features and traits): Identity userIdentity = await bulletClient.GetUserIdentity(\"my_user_id\"); if (userIdentity != null) { // Run the code to use user identity i.e. userIdentity.flags or userIdentity.traits }","title":"Usage"},{"location":"clients/dotnet/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"clients/dotnet/#getting-help","text":"If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.","title":"Getting Help"},{"location":"clients/dotnet/#get-in-touch","text":"If you have any questions about our projects you can email projects@solidstategroup.com .","title":"Get in touch"},{"location":"clients/ios/","text":"iOS Client This library can be used with iOS and Mac applications. The source code for the client is available on Github . Usage BulletTrain.shared.apiKey = \"<add your API key from the Bullet Train settings page>\" BulletTrain.shared.getFeatureFlags() { (result) in print(result) } BulletTrain.shared.hasFeatureFlag(withID: \"freeze_delinquent_accounts\") { (result) in print(result) }","title":"iOS"},{"location":"clients/ios/#ios-client","text":"This library can be used with iOS and Mac applications. The source code for the client is available on Github .","title":"iOS Client"},{"location":"clients/ios/#usage","text":"BulletTrain.shared.apiKey = \"<add your API key from the Bullet Train settings page>\" BulletTrain.shared.getFeatureFlags() { (result) in print(result) } BulletTrain.shared.hasFeatureFlag(withID: \"freeze_delinquent_accounts\") { (result) in print(result) }","title":"Usage"},{"location":"clients/java/","text":"Java Client This library can be used with server-side Java and Android applications. The source code for the client is available on Github . Getting Started Quick Setup The client library is available from the Central Maven Repository and can be added to your project by many tools: Maven Add following dependencies to your project in pom.xml <dependency> <groupId>com.solidstategroup</groupId> <artifactId>bullet-train-client</artifactId> <version>1.3</version> </dependency> Gradle implementation 'com.solidstategroup:bullet-train-client:1.3' Usage Sign Up and create account at https://bullet-train.io/ In your application initialise BulletTrain client with your API key BulletTrainClient bulletClient = BulletTrainClient.newBuilder() .setApiKey(\"YOUR_ENV_API_KEY\") .build(); To check if feature flag exist and enabled: boolean featureEnabled = bulletClient.hasFeatureFlag(\"my_test_feature\"); if (featureEnabled) { // run the code to execute enabled feature } else { // run the code if feature switched off } To get configuration value for feature flag: String myRemoteConfig = bulletClient.getFeatureFlagValue(\"my_test_feature\"); if (myRemoteConfig != null) { // run the code to use remote config value } else { // run the code without remote config } Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . To check if feature exist for given user context: User user = new User(); user.setIdentifier(\"bullet_train_sample_user\"); boolean featureEnabled = bulletClient.hasFeatureFlag(\"my_test_feature\", user); if (featureEnabled) { String myRemoteConfig = bulletClient.getFeatureFlagValue(\"my_test_feature\", user); // run the code for to execute enabled feature for given user } else { // run the code if feature switched off } To get configuration value for feature flag for given user context: String myRemoteConfig = bulletClient.getFeatureFlagValue(\"my_test_feature\", user); if (myRemoteConfig != null) { // run the code to use remote config value } else { // run the code without remote config } Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Getting Help If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.","title":"Java"},{"location":"clients/java/#java-client","text":"This library can be used with server-side Java and Android applications. The source code for the client is available on Github .","title":"Java Client"},{"location":"clients/java/#getting-started","text":"","title":"Getting Started"},{"location":"clients/java/#quick-setup","text":"The client library is available from the Central Maven Repository and can be added to your project by many tools:","title":"Quick Setup"},{"location":"clients/java/#maven","text":"Add following dependencies to your project in pom.xml <dependency> <groupId>com.solidstategroup</groupId> <artifactId>bullet-train-client</artifactId> <version>1.3</version> </dependency>","title":"Maven"},{"location":"clients/java/#gradle","text":"implementation 'com.solidstategroup:bullet-train-client:1.3'","title":"Gradle"},{"location":"clients/java/#usage","text":"Sign Up and create account at https://bullet-train.io/ In your application initialise BulletTrain client with your API key BulletTrainClient bulletClient = BulletTrainClient.newBuilder() .setApiKey(\"YOUR_ENV_API_KEY\") .build(); To check if feature flag exist and enabled: boolean featureEnabled = bulletClient.hasFeatureFlag(\"my_test_feature\"); if (featureEnabled) { // run the code to execute enabled feature } else { // run the code if feature switched off } To get configuration value for feature flag: String myRemoteConfig = bulletClient.getFeatureFlagValue(\"my_test_feature\"); if (myRemoteConfig != null) { // run the code to use remote config value } else { // run the code without remote config }","title":"Usage"},{"location":"clients/java/#identifying-users","text":"Identifying users allows you to target specific users from the Bullet Train dashboard . To check if feature exist for given user context: User user = new User(); user.setIdentifier(\"bullet_train_sample_user\"); boolean featureEnabled = bulletClient.hasFeatureFlag(\"my_test_feature\", user); if (featureEnabled) { String myRemoteConfig = bulletClient.getFeatureFlagValue(\"my_test_feature\", user); // run the code for to execute enabled feature for given user } else { // run the code if feature switched off } To get configuration value for feature flag for given user context: String myRemoteConfig = bulletClient.getFeatureFlagValue(\"my_test_feature\", user); if (myRemoteConfig != null) { // run the code to use remote config value } else { // run the code without remote config }","title":"Identifying users"},{"location":"clients/java/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"clients/java/#getting-help","text":"If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.","title":"Getting Help"},{"location":"clients/javascript/","text":"This library can be used with pure Javascript, React (and all other popular frameworks/libraries) and React Native projects. The source code for the client is available on Github . Example applications for Web and React Native can be found here: Web example React Native example Examples applications for many popular JS frameworks such as React, Vue and Angular can be found here: JS framework examples Installation NPM npm i bullet-train-client --save Via JavaScript CDN <script src=\"https://cdn.jsdelivr.net/npm/bullet-train-client/lib/index.js\"></script> NPM for React Native npm i react-native-bullet-train --save Basic Usage The SDK is initialised against a single environment within a project on https://bullet-train.io , for example the Development or Production environment. You can find your environment key in the Environment settings page. Example: Initialising the SDK import bulletTrain from \"bullet-train-client or react-native-bullet-train\"; //Add this line if you're using bulletTrain via npm bulletTrain.init({ environmentID:\"<YOUR_ENVIRONMENT_KEY>\", cacheFlags: true, onChange: (oldFlags,params)=>{ //Occurs whenever flags are changed const {isFromServer} = params; //determines if the update came from the server or local cached storage //Check for a feature if (bulletTrain.hasFeature(\"myCoolFeature\")){ myCoolFeature(); } //Or, use the value of a feature const bannerSize = bulletTrain.getValue(\"bannerSize\"); //Check whether value has changed const bannerSizeOld = oldFlags[\"bannerSize\"] && oldFlags[\"bannerSize\"].value; if (bannerSize !== bannerSizeOld) { } } }); Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard and configure features and traits. You can call this before or after you initialise the project, calling it after will re-fetch features from the API. User features can be managed by navigating to users on https://bullet-train.io for your desired project. Example: Initialising the SDK and identifying as a user import bulletTrain from 'bullet-train-client'; /* Can be called both before or after you're done initialising the project. Calling identify before will prevent flags being fetched twice. */ bulletTrain.identify(\"bullet_train_sample_user\"}); //This will create a user in the dashboard if they don't already exist bulletTrain.setTrait(\"favourite_colour\",\"blue\"); //This save the trait against the user, it can be queried with bulletTrain.getTrait //Standard project initialisation bulletTrain.init({ environmentID: \"QjgYur4LQTwe5HpvbvhpzK\", onChange: (oldFlags,params)=>{ //Occurs whenever flags are changed const {isFromServer} = params; //determines if the update came from the server or local cached storage //Check for a feature if (bulletTrain.hasFeature(\"myPowerUserFeature\")){ myPowerUserFeature(); } //Check for a trait if (!bulletTrain.getTrait(\"accepted_cookie_policy\")){ showCookiePolicy(); } //Or, use the value of a feature const myPowerUserFeature = bulletTrain.getValue(\"myPowerUserFeature\"); //Check whether value has changed const myPowerUserFeatureOld = oldFlags[\"myPowerUserFeature\"] && oldFlags[\"myPowerUserFeature\"].value; if (myPowerUserFeature !== myPowerUserFeatureOld) { } } }) API Reference Initialisation options Property Description Required Default Value environmentID Defines which project environment you wish to get flags for. example ACME Project - Staging. YES null onChange Your callback function for when the flags are retrieved (flags,{isFromServer:true/false})=>{...} YES null onError Callback function on failure to retrieve flags. (error)=>{...} null cacheFlags Any time flags are retrieved they will be cached, flags and identities will then be retrieved from local storage before hitting the API ``` null enableLogs Enables logging for key bullet train events ``` null defaultFlags Allows you define default features, these will all be overridden on first retrieval of features. null api Use this property to define where you're getting feature flags from, e.g. if you're self hosting. https://featureflagger.3qqe.flynnhub.com/api/ Available Functions Property Description init Initialise the sdk against a particular environment hasFeature(key) Get the value of a particular feature e.g. bulletTrain.hasFeature(\"powerUserFeature\") // true getValue(key) Get the value of a particular feature e.g. bulletTrain.getValue(\"font_size\") // 10 getTrait(key) Once used with an identified user you can get the value of any trait that is set for them e.g. bulletTrain.getTrait(\"accepted_cookie_policy\") setTrait(key, value) Once used with an identified user you can set the value of any trait relevant to them e.g. bulletTrain.setTrait(\"accepted_cookie_policy\", true) incrementTrait(key, value) You can also increment/decrement a particular trait them e.g. bulletTrain.incrementTrait(\"click_count\", 1) startListening(ticks=1000) Poll the api for changes every x milliseconds stopListening() Stop polling the api getFlags() Trigger a manual fetch of the environment features, if a user is identified it will fetch their features identify(userId) Identify as a user, this will create a user for your environment in the dashboard if they don't exist, it will also trigger a call to getFlags() logout() Stop identifying as a user, this will trigger a call to getFlags()","title":"Javascript/React Native"},{"location":"clients/javascript/#installation","text":"NPM npm i bullet-train-client --save Via JavaScript CDN <script src=\"https://cdn.jsdelivr.net/npm/bullet-train-client/lib/index.js\"></script> NPM for React Native npm i react-native-bullet-train --save","title":"Installation"},{"location":"clients/javascript/#basic-usage","text":"The SDK is initialised against a single environment within a project on https://bullet-train.io , for example the Development or Production environment. You can find your environment key in the Environment settings page. Example: Initialising the SDK import bulletTrain from \"bullet-train-client or react-native-bullet-train\"; //Add this line if you're using bulletTrain via npm bulletTrain.init({ environmentID:\"<YOUR_ENVIRONMENT_KEY>\", cacheFlags: true, onChange: (oldFlags,params)=>{ //Occurs whenever flags are changed const {isFromServer} = params; //determines if the update came from the server or local cached storage //Check for a feature if (bulletTrain.hasFeature(\"myCoolFeature\")){ myCoolFeature(); } //Or, use the value of a feature const bannerSize = bulletTrain.getValue(\"bannerSize\"); //Check whether value has changed const bannerSizeOld = oldFlags[\"bannerSize\"] && oldFlags[\"bannerSize\"].value; if (bannerSize !== bannerSizeOld) { } } });","title":"Basic Usage"},{"location":"clients/javascript/#identifying-users","text":"Identifying users allows you to target specific users from the Bullet Train dashboard and configure features and traits. You can call this before or after you initialise the project, calling it after will re-fetch features from the API. User features can be managed by navigating to users on https://bullet-train.io for your desired project. Example: Initialising the SDK and identifying as a user import bulletTrain from 'bullet-train-client'; /* Can be called both before or after you're done initialising the project. Calling identify before will prevent flags being fetched twice. */ bulletTrain.identify(\"bullet_train_sample_user\"}); //This will create a user in the dashboard if they don't already exist bulletTrain.setTrait(\"favourite_colour\",\"blue\"); //This save the trait against the user, it can be queried with bulletTrain.getTrait //Standard project initialisation bulletTrain.init({ environmentID: \"QjgYur4LQTwe5HpvbvhpzK\", onChange: (oldFlags,params)=>{ //Occurs whenever flags are changed const {isFromServer} = params; //determines if the update came from the server or local cached storage //Check for a feature if (bulletTrain.hasFeature(\"myPowerUserFeature\")){ myPowerUserFeature(); } //Check for a trait if (!bulletTrain.getTrait(\"accepted_cookie_policy\")){ showCookiePolicy(); } //Or, use the value of a feature const myPowerUserFeature = bulletTrain.getValue(\"myPowerUserFeature\"); //Check whether value has changed const myPowerUserFeatureOld = oldFlags[\"myPowerUserFeature\"] && oldFlags[\"myPowerUserFeature\"].value; if (myPowerUserFeature !== myPowerUserFeatureOld) { } } })","title":"Identifying users"},{"location":"clients/javascript/#api-reference","text":"Initialisation options Property Description Required Default Value environmentID Defines which project environment you wish to get flags for. example ACME Project - Staging. YES null onChange Your callback function for when the flags are retrieved (flags,{isFromServer:true/false})=>{...} YES null onError Callback function on failure to retrieve flags. (error)=>{...} null cacheFlags Any time flags are retrieved they will be cached, flags and identities will then be retrieved from local storage before hitting the API ``` null enableLogs Enables logging for key bullet train events ``` null defaultFlags Allows you define default features, these will all be overridden on first retrieval of features. null api Use this property to define where you're getting feature flags from, e.g. if you're self hosting. https://featureflagger.3qqe.flynnhub.com/api/ Available Functions Property Description init Initialise the sdk against a particular environment hasFeature(key) Get the value of a particular feature e.g. bulletTrain.hasFeature(\"powerUserFeature\") // true getValue(key) Get the value of a particular feature e.g. bulletTrain.getValue(\"font_size\") // 10 getTrait(key) Once used with an identified user you can get the value of any trait that is set for them e.g. bulletTrain.getTrait(\"accepted_cookie_policy\") setTrait(key, value) Once used with an identified user you can set the value of any trait relevant to them e.g. bulletTrain.setTrait(\"accepted_cookie_policy\", true) incrementTrait(key, value) You can also increment/decrement a particular trait them e.g. bulletTrain.incrementTrait(\"click_count\", 1) startListening(ticks=1000) Poll the api for changes every x milliseconds stopListening() Stop polling the api getFlags() Trigger a manual fetch of the environment features, if a user is identified it will fetch their features identify(userId) Identify as a user, this will create a user for your environment in the dashboard if they don't exist, it will also trigger a call to getFlags() logout() Stop identifying as a user, this will trigger a call to getFlags()","title":"API Reference"},{"location":"clients/node/","text":"This library can be used with server-side NodeJS projects. The source code for the client is available on Github . Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system. Installing VIA npm npm i bullet-train-nodejs --save Usage Retrieving feature flags for your project For full documentation visit https://docs.bullet-train.io var bulletTrain = require(\"bullet-train-nodejs\"); bulletTrain.init({ environmentID: \"<YOUR_ENVIRONMENT_KEY>\" }); bulletTrain.hasFeature(\"header\", '<My User Id>') .then((featureEnabled) => { if (featureEnabled) { //Show my awesome cool new feature to this one user } }); bulletTrain.hasFeature(\"header\") .then((featureEnabled) => { if (featureEnabled) { //Show my awesome cool new feature to the world } }); bulletTrain.getValue(\"header\", '<My User Id') .then((value) => { //Show some unique value to this user }); bulletTrain.getValue(\"header\") .then((value) => { //Show a value to the world }); Available Options Property Description Required Default Value environmentID Defines which project environment you wish to get flags for. example ACME Project - Staging. YES null onError Callback function on failure to retrieve flags. (error)=>{...} NO null defaultFlags Defines the default flags if there are any NO null api Use this property to define where you're getting feature flags from, e.g. if you're self hosting. NO https://bullet-train-api.dokku1.solidstategroup.com/api/v1/ Available Functions Property Description init Initialise the sdk against a particular environment hasFeature(key) Get the value of a particular feature e.g. bulletTrain.hasFeature(\"powerUserFeature\") // true hasFeature(key, userId) Get the value of a particular feature for a user e.g. bulletTrain.hasFeature(\"powerUserFeature\", 1234) // true getValue(key) Get the value of a particular feature e.g. bulletTrain.getValue(\"font_size\") // 10 getValue(key, userId) Get the value of a particular feature for a specificed user e.g. bulletTrain.getValue(\"font_size\", 1234) // 15 getFlags() Trigger a manual fetch of the environment features getFlagsForUser(userId) Trigger a manual fetch of the environment features for a given user id getUserIdentity(userId) Trigger a manual fetch of both the environment features and users' traits for a given user id getTrait(userId, key) Trigger a manual fetch of a specific trait for a given user id setTrait(userId, key, value) Set a specific trait for a given user id Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . You can include an optional user identifier as part of the hasFeature and getValue methods to retrieve unique user flags and variables. Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Getting Help If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. Get in touch If you have any questions about our projects you can email projects@solidstategroup.com .","title":"Node"},{"location":"clients/node/#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.","title":"Getting Started"},{"location":"clients/node/#installing","text":"","title":"Installing"},{"location":"clients/node/#via-npm","text":"npm i bullet-train-nodejs --save","title":"VIA npm"},{"location":"clients/node/#usage","text":"Retrieving feature flags for your project For full documentation visit https://docs.bullet-train.io var bulletTrain = require(\"bullet-train-nodejs\"); bulletTrain.init({ environmentID: \"<YOUR_ENVIRONMENT_KEY>\" }); bulletTrain.hasFeature(\"header\", '<My User Id>') .then((featureEnabled) => { if (featureEnabled) { //Show my awesome cool new feature to this one user } }); bulletTrain.hasFeature(\"header\") .then((featureEnabled) => { if (featureEnabled) { //Show my awesome cool new feature to the world } }); bulletTrain.getValue(\"header\", '<My User Id') .then((value) => { //Show some unique value to this user }); bulletTrain.getValue(\"header\") .then((value) => { //Show a value to the world }); Available Options Property Description Required Default Value environmentID Defines which project environment you wish to get flags for. example ACME Project - Staging. YES null onError Callback function on failure to retrieve flags. (error)=>{...} NO null defaultFlags Defines the default flags if there are any NO null api Use this property to define where you're getting feature flags from, e.g. if you're self hosting. NO https://bullet-train-api.dokku1.solidstategroup.com/api/v1/ Available Functions Property Description init Initialise the sdk against a particular environment hasFeature(key) Get the value of a particular feature e.g. bulletTrain.hasFeature(\"powerUserFeature\") // true hasFeature(key, userId) Get the value of a particular feature for a user e.g. bulletTrain.hasFeature(\"powerUserFeature\", 1234) // true getValue(key) Get the value of a particular feature e.g. bulletTrain.getValue(\"font_size\") // 10 getValue(key, userId) Get the value of a particular feature for a specificed user e.g. bulletTrain.getValue(\"font_size\", 1234) // 15 getFlags() Trigger a manual fetch of the environment features getFlagsForUser(userId) Trigger a manual fetch of the environment features for a given user id getUserIdentity(userId) Trigger a manual fetch of both the environment features and users' traits for a given user id getTrait(userId, key) Trigger a manual fetch of a specific trait for a given user id setTrait(userId, key, value) Set a specific trait for a given user id Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . You can include an optional user identifier as part of the hasFeature and getValue methods to retrieve unique user flags and variables.","title":"Usage"},{"location":"clients/node/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"clients/node/#getting-help","text":"If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.","title":"Getting Help"},{"location":"clients/node/#get-in-touch","text":"If you have any questions about our projects you can email projects@solidstategroup.com .","title":"Get in touch"},{"location":"clients/python/","text":"This library can be used with server-side Python projects. The source code for the client is available on Github . Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system. Installing VIA pip pip install bullet-train Usage Retrieving feature flags for your project For full documentation visit https://docs.bullet-train.io from bullet_train import BulletTrain; bt = BulletTrain(environment_id=\"<YOUR_ENVIRONMENT_KEY>\") if bt.has_feature(\"header\", '<My User Id>'): if bt.feature_enabled(\"header\"): # Show my awesome cool new feature to the world if bt.has_feature(\"header\"): if bt.feature_enabled(\"header\"): # Show my awesome cool new feature to the world value = bt.get_value(\"header\", '<My User Id>') value = bt.get_value(\"header\") Available Options Property Description Required Default Value environment_id Defines which project environment you wish to get flags for. example ACME Project - Staging. YES None api Use this property to define where you're getting feature flags from, e.g. if you're self hosting. NO https://api.bullet-train.io/api/ Available Functions Function Description has_feature(key) Get the value of a particular feature e.g. bt.has_feature(\"powerUserFeature\") // true has_feature(key, user_id) Get the value of a particular feature for a user e.g. bt.has_feature(\"powerUserFeature\", 1234) // true get_value(key) Get the value of a particular feature e.g. bt.get_value(\"font_size\") // 10 get_value(key, userId) Get the value of a particular feature for a specified user e.g. bt.get_value(\"font_size\", 1234) // 15 get_flags() Trigger a manual fetch of the environment features, returns a list of flag objects, see below for returned data get_flags_for_user(1234) Trigger a manual fetch of the environment features with a given user id, returns a list of flag objects, see below for returned data Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . You can include an optional user identifier as part of the has_feature and get_value methods to retrieve unique user flags and variables. Flags data structure Field Description Type id Internal id of feature state Integer enabled Whether feature is enabled or not Boolean environment Internal ID of environment Integer feature_state_value Value of the feature Any - determined based on data input on bullet-train.io . feature Feature object - see below for details Object Feature data structure Field Description Type id Internal id of feature Integer name Name of the feature (sometimes referred to as key or ID) String description Description of the feature String type Feature Type. Can be FLAG or CONFIG String created_date Date feature was created Datetime inital_value The initial / default value set for all feature states on creation String project Internal ID of the associated project Integer Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Getting Help If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. Get in touch If you have any questions about our projects you can email projects@solidstategroup.com .","title":"Python"},{"location":"clients/python/#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.","title":"Getting Started"},{"location":"clients/python/#installing","text":"","title":"Installing"},{"location":"clients/python/#via-pip","text":"pip install bullet-train","title":"VIA pip"},{"location":"clients/python/#usage","text":"Retrieving feature flags for your project For full documentation visit https://docs.bullet-train.io from bullet_train import BulletTrain; bt = BulletTrain(environment_id=\"<YOUR_ENVIRONMENT_KEY>\") if bt.has_feature(\"header\", '<My User Id>'): if bt.feature_enabled(\"header\"): # Show my awesome cool new feature to the world if bt.has_feature(\"header\"): if bt.feature_enabled(\"header\"): # Show my awesome cool new feature to the world value = bt.get_value(\"header\", '<My User Id>') value = bt.get_value(\"header\") Available Options Property Description Required Default Value environment_id Defines which project environment you wish to get flags for. example ACME Project - Staging. YES None api Use this property to define where you're getting feature flags from, e.g. if you're self hosting. NO https://api.bullet-train.io/api/ Available Functions Function Description has_feature(key) Get the value of a particular feature e.g. bt.has_feature(\"powerUserFeature\") // true has_feature(key, user_id) Get the value of a particular feature for a user e.g. bt.has_feature(\"powerUserFeature\", 1234) // true get_value(key) Get the value of a particular feature e.g. bt.get_value(\"font_size\") // 10 get_value(key, userId) Get the value of a particular feature for a specified user e.g. bt.get_value(\"font_size\", 1234) // 15 get_flags() Trigger a manual fetch of the environment features, returns a list of flag objects, see below for returned data get_flags_for_user(1234) Trigger a manual fetch of the environment features with a given user id, returns a list of flag objects, see below for returned data Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . You can include an optional user identifier as part of the has_feature and get_value methods to retrieve unique user flags and variables. Flags data structure Field Description Type id Internal id of feature state Integer enabled Whether feature is enabled or not Boolean environment Internal ID of environment Integer feature_state_value Value of the feature Any - determined based on data input on bullet-train.io . feature Feature object - see below for details Object Feature data structure Field Description Type id Internal id of feature Integer name Name of the feature (sometimes referred to as key or ID) String description Description of the feature String type Feature Type. Can be FLAG or CONFIG String created_date Date feature was created Datetime inital_value The initial / default value set for all feature states on creation String project Internal ID of the associated project Integer","title":"Usage"},{"location":"clients/python/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"clients/python/#getting-help","text":"If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.","title":"Getting Help"},{"location":"clients/python/#get-in-touch","text":"If you have any questions about our projects you can email projects@solidstategroup.com .","title":"Get in touch"},{"location":"clients/rest/","text":"Direct API Access You can access the API directly with tools like curl or httpie , or with clients for languages that we do not currently have SDKs for. API Explorer You can view the API via Swagger at https://api.bullet-train.io/api/v1/docs/ . Environment Key Publicly accessible API calls need to have an environment key supplied with each request. This is provided as an HTTP header, with the name X-Environment-Key and the value of the environment API key that you can find within the Bullet Train administrative area. Curl Example curl 'https://api.bullet-train.io/api/v1/flags/' -H 'X-Environment-Key: TijpMX6ajA7REC4bf5suYg' httpie Example http GET 'https://api.bullet-train.io/api/v1/flags/' 'X-Environment-Key':'TijpMX6ajA7REC4bf5suYg'","title":"REST"},{"location":"clients/rest/#direct-api-access","text":"You can access the API directly with tools like curl or httpie , or with clients for languages that we do not currently have SDKs for.","title":"Direct API Access"},{"location":"clients/rest/#api-explorer","text":"You can view the API via Swagger at https://api.bullet-train.io/api/v1/docs/ .","title":"API Explorer"},{"location":"clients/rest/#environment-key","text":"Publicly accessible API calls need to have an environment key supplied with each request. This is provided as an HTTP header, with the name X-Environment-Key and the value of the environment API key that you can find within the Bullet Train administrative area.","title":"Environment Key"},{"location":"clients/rest/#curl-example","text":"curl 'https://api.bullet-train.io/api/v1/flags/' -H 'X-Environment-Key: TijpMX6ajA7REC4bf5suYg'","title":"Curl Example"},{"location":"clients/rest/#httpie-example","text":"http GET 'https://api.bullet-train.io/api/v1/flags/' 'X-Environment-Key':'TijpMX6ajA7REC4bf5suYg'","title":"httpie Example"},{"location":"clients/ruby/","text":"Bullet Train Client The SDK clients for Ruby https://bullet-train.io/ . Bullet Train allows you to manage feature flags and remote config across multiple projects, environments and organisations. Getting Started These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system. Installing VIA gem gem install bullet-train-client Usage Retrieving feature flags for your project For full documentation visit https://docs.bullet-train.io require \"bullet-train-ruby-client\" bt = BulletTrain.new(<<Your API KEY>>\") if bt.getValue(\"font_size\") # Do something awesome with the font size end if bt.hasFeature(\"does_not_exist\") #do something else #do nothing, or something else end Available Options Property Description Required Default Value environmentID Defines which project environment you wish to get flags for. example ACME Project - Staging. YES null onError Callback function on failure to retrieve flags. (error)=>{...} NO null defaultFlags Defines the default flags if there are any NO null api Use this property to define where you're getting feature flags from, e.g. if you're self hosting. NO https://bullet-train-api.dokku1.solidstategroup.com/api/v1/ Available Functions Property Description init Initialise the sdk against a particular environment hasFeature(key) Get the value of a particular feature e.g. bulletTrain.hasFeature(\"powerUserFeature\") // true hasFeature(key, userId) Get the value of a particular feature for a user e.g. bulletTrain.hasFeature(\"powerUserFeature\", 1234) // true getValue(key) Get the value of a particular feature e.g. bulletTrain.getValue(\"font_size\") // 10 getValue(keym userId) Get the value of a particular feature for a specificed user e.g. bulletTrain.getValue(\"font_size\", 1234) // 15 getFlags() Trigger a manual fetch of the environment features, if a user is identified it will fetch their features getFlagsForUser(1234) Trigger a manual fetch of the environment features with a given user id Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . You can include an optional user identifier as part of the hasFeature and getValue methods to retrieve unique user flags and variables. Contributing Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us. Getting Help If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. Get in touch If you have any questions about our projects you can email projects@solidstategroup.com .","title":"Ruby"},{"location":"clients/ruby/#bullet-train-client","text":"The SDK clients for Ruby https://bullet-train.io/ . Bullet Train allows you to manage feature flags and remote config across multiple projects, environments and organisations.","title":"Bullet Train Client"},{"location":"clients/ruby/#getting-started","text":"These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.","title":"Getting Started"},{"location":"clients/ruby/#installing","text":"","title":"Installing"},{"location":"clients/ruby/#via-gem","text":"gem install bullet-train-client","title":"VIA gem"},{"location":"clients/ruby/#usage","text":"Retrieving feature flags for your project For full documentation visit https://docs.bullet-train.io require \"bullet-train-ruby-client\" bt = BulletTrain.new(<<Your API KEY>>\") if bt.getValue(\"font_size\") # Do something awesome with the font size end if bt.hasFeature(\"does_not_exist\") #do something else #do nothing, or something else end Available Options Property Description Required Default Value environmentID Defines which project environment you wish to get flags for. example ACME Project - Staging. YES null onError Callback function on failure to retrieve flags. (error)=>{...} NO null defaultFlags Defines the default flags if there are any NO null api Use this property to define where you're getting feature flags from, e.g. if you're self hosting. NO https://bullet-train-api.dokku1.solidstategroup.com/api/v1/ Available Functions Property Description init Initialise the sdk against a particular environment hasFeature(key) Get the value of a particular feature e.g. bulletTrain.hasFeature(\"powerUserFeature\") // true hasFeature(key, userId) Get the value of a particular feature for a user e.g. bulletTrain.hasFeature(\"powerUserFeature\", 1234) // true getValue(key) Get the value of a particular feature e.g. bulletTrain.getValue(\"font_size\") // 10 getValue(keym userId) Get the value of a particular feature for a specificed user e.g. bulletTrain.getValue(\"font_size\", 1234) // 15 getFlags() Trigger a manual fetch of the environment features, if a user is identified it will fetch their features getFlagsForUser(1234) Trigger a manual fetch of the environment features with a given user id Identifying users Identifying users allows you to target specific users from the Bullet Train dashboard . You can include an optional user identifier as part of the hasFeature and getValue methods to retrieve unique user flags and variables.","title":"Usage"},{"location":"clients/ruby/#contributing","text":"Please read CONTRIBUTING.md for details on our code of conduct, and the process for submitting pull requests to us.","title":"Contributing"},{"location":"clients/ruby/#getting-help","text":"If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.","title":"Getting Help"},{"location":"clients/ruby/#get-in-touch","text":"If you have any questions about our projects you can email projects@solidstategroup.com .","title":"Get in touch"}]}