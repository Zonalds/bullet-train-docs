{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\nBullet Train\n lets you manage features across web, mobile and server side applications. Bullet Train is 100% Open Source. Host yourself or let us take care of the hosting.\n\n\nThe application consist of 3 components:\n\n\n\n\nThe \nServer-Side REST API\n.\n\n\nThe \nFront End Administration Web Interface\n.\n\n\nClient Libraries.\n\n\n\n\nTo get up and running, you can either use \nhttps://bullet-train.io/\n for 1 and 2 above, or you can self host the API and Front End. Once you have these components up and running, you can add the client libraries to your apps and start managing your features remotely.\n\n\nInstallation\n\n\nServer Side API\n\n\nThe source code and installation instructions can be found at \nthe GitHub project\n.\n\n\nFront End Website\n\n\nThe source code and installation instructions can be found at \nthe GitHub project\n.\n\n\nClient Libraries\n\n\nOnce you are setup with the front and back end, you can integrate our client libraries with your apps.\n\n\n\n\nJavascript and React/React Native\n\n\nNodeJS\n\n\nJava\n\n\nPython\n\n\nRuby\n\n\n.Net\n\n\n\n\nJavascript framework examples\n\n\nExamples applications for popular JS frameswork can be found here:\n\n\n\n\nJS framework examples\n\n\n\n\nWhat Next\n\n\nFind out more about \nManaging Features", 
            "title": "Overview and Install"
        }, 
        {
            "location": "/#overview", 
            "text": "Bullet Train  lets you manage features across web, mobile and server side applications. Bullet Train is 100% Open Source. Host yourself or let us take care of the hosting.  The application consist of 3 components:   The  Server-Side REST API .  The  Front End Administration Web Interface .  Client Libraries.   To get up and running, you can either use  https://bullet-train.io/  for 1 and 2 above, or you can self host the API and Front End. Once you have these components up and running, you can add the client libraries to your apps and start managing your features remotely.", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#server-side-api", 
            "text": "The source code and installation instructions can be found at  the GitHub project .", 
            "title": "Server Side API"
        }, 
        {
            "location": "/#front-end-website", 
            "text": "The source code and installation instructions can be found at  the GitHub project .", 
            "title": "Front End Website"
        }, 
        {
            "location": "/#client-libraries", 
            "text": "Once you are setup with the front and back end, you can integrate our client libraries with your apps.   Javascript and React/React Native  NodeJS  Java  Python  Ruby  .Net", 
            "title": "Client Libraries"
        }, 
        {
            "location": "/#javascript-framework-examples", 
            "text": "Examples applications for popular JS frameswork can be found here:   JS framework examples", 
            "title": "Javascript framework examples"
        }, 
        {
            "location": "/#what-next", 
            "text": "Find out more about  Managing Features", 
            "title": "What Next"
        }, 
        {
            "location": "/hosted-service/", 
            "text": "Hosted Service\n\n\nIf you would rather skip the hosting and jump straight to integrating Bullet Train with your own application, you can use \nhttps://bullet-train.io/\n right now. \n\n\nWe are going to be bringing paid plans to the service soon, with pricing to suit startups, not enterprise customers.\n\n\nIf you want to discuss hosting options, \nplease get in touch\n.", 
            "title": "Hosted Service"
        }, 
        {
            "location": "/hosted-service/#hosted-service", 
            "text": "If you would rather skip the hosting and jump straight to integrating Bullet Train with your own application, you can use  https://bullet-train.io/  right now.   We are going to be bringing paid plans to the service soon, with pricing to suit startups, not enterprise customers.  If you want to discuss hosting options,  please get in touch .", 
            "title": "Hosted Service"
        }, 
        {
            "location": "/managing-features/", 
            "text": "Features\n\n\nRather than just a flag that can be turned on / off, features within Bullet Train are pieces of functionality that have an enabled state as well as a configurable value. This allows you to use Bullet Train in the following ways.\n\n\n\n\nShowing and hiding features in your application. E.g. Instant messaging within an application.\n\n\nConfiguring values used within your application remotely. E.g. The number of power-ups a user might have in a game.\n\n\nConfiguring environment variables. E.g. Setting the database URL for your API.\n\n\n\n\nFeatures are created on a per project basis but edited per environment and can then be overridden on a per user basis. \n\n\nOrganisations\n\n\nOrganisations are a way for you and other team members to manage projects and their features. Users can be members of multiple organisations.\n\n\nProjects\n\n\nProjects contain one or more environments that share a single set of features and one or more environments. Organisations can have any number of projects.\n\n\nEnvironments\n\n\nEnvironments are a way to separate the configuration of your features. For example, your project's Development and Staging environments might have a feature configured as on while it is turned off in your Production environment. A project can have any number of environments. \n\n\nIdentities\n\n\nIdentities are a particular registration for one of your Project's environments. Registering identities within the client application allows you to manage features for individual users. Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.\n\n\nFor more info see the \nIdentities\n. \n\n\nSegments (\nComing soon\n)\n\n\nSegments are a way to define a group of users by traits such as number of times logged in, device, location or any number of custom defined traits.\n\n\nSimilarly to individual users, you will be able to override environment defaults for features. For example showing certain features for a \"power user\" segment.", 
            "title": "Managing Features"
        }, 
        {
            "location": "/managing-features/#features", 
            "text": "Rather than just a flag that can be turned on / off, features within Bullet Train are pieces of functionality that have an enabled state as well as a configurable value. This allows you to use Bullet Train in the following ways.   Showing and hiding features in your application. E.g. Instant messaging within an application.  Configuring values used within your application remotely. E.g. The number of power-ups a user might have in a game.  Configuring environment variables. E.g. Setting the database URL for your API.   Features are created on a per project basis but edited per environment and can then be overridden on a per user basis.", 
            "title": "Features"
        }, 
        {
            "location": "/managing-features/#organisations", 
            "text": "Organisations are a way for you and other team members to manage projects and their features. Users can be members of multiple organisations.", 
            "title": "Organisations"
        }, 
        {
            "location": "/managing-features/#projects", 
            "text": "Projects contain one or more environments that share a single set of features and one or more environments. Organisations can have any number of projects.", 
            "title": "Projects"
        }, 
        {
            "location": "/managing-features/#environments", 
            "text": "Environments are a way to separate the configuration of your features. For example, your project's Development and Staging environments might have a feature configured as on while it is turned off in your Production environment. A project can have any number of environments.", 
            "title": "Environments"
        }, 
        {
            "location": "/managing-features/#identities", 
            "text": "Identities are a particular registration for one of your Project's environments. Registering identities within the client application allows you to manage features for individual users. Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.  For more info see the  Identities .", 
            "title": "Identities"
        }, 
        {
            "location": "/managing-features/#segments-coming-soon", 
            "text": "Segments are a way to define a group of users by traits such as number of times logged in, device, location or any number of custom defined traits.  Similarly to individual users, you will be able to override environment defaults for features. For example showing certain features for a \"power user\" segment.", 
            "title": "Segments (Coming soon)"
        }, 
        {
            "location": "/managing-identities/", 
            "text": "Identities\n\n\nIdentities are created within Bullet Train automatically the first time they are identified from your client SDKs. Generally you'd make a call to identify a user with a unique string/id whenever they log into your app/site.\n\n\nIdentity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.\n\n\nIdentity Feature Flags\n\n\nBy default, Identities receive the default flags for their environment. The main use for identities is to be able to override flags and configs on a per-identity basis. You can do this by navigating to the Users page, finding the user and modifying their flags. \n\n\nIdentity Traits\n\n\nYou can also use Bullet Train to store 'Traits' against identities. Traits are simply key/value pairs that are associated with individual Identities. Traits can be used to store additional data about your users that would be cumbersome to store within your application. Some possible uses for traits could be:\n\n\n\n\nStoring whether the user has accepted a new set of terms and conditions.\n\n\nStoring the last viewed page of the application so that you can resume the users place later, across any device.\n\n\n\n\nGenerally if they are lower-value pieces of information about your user, it might be simpler/easier to store them in Bullet Train rather than in your core application.\n\n\nTraits are stored natively as either numbers, strings or booleans.\n\n\nTraits powering Segments\n\n\nWhen the Segments feature is built, you will be able to specify segments based on Identity Traits.", 
            "title": "Managing Identities"
        }, 
        {
            "location": "/managing-identities/#identities", 
            "text": "Identities are created within Bullet Train automatically the first time they are identified from your client SDKs. Generally you'd make a call to identify a user with a unique string/id whenever they log into your app/site.  Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.", 
            "title": "Identities"
        }, 
        {
            "location": "/managing-identities/#identity-feature-flags", 
            "text": "By default, Identities receive the default flags for their environment. The main use for identities is to be able to override flags and configs on a per-identity basis. You can do this by navigating to the Users page, finding the user and modifying their flags.", 
            "title": "Identity Feature Flags"
        }, 
        {
            "location": "/managing-identities/#identity-traits", 
            "text": "You can also use Bullet Train to store 'Traits' against identities. Traits are simply key/value pairs that are associated with individual Identities. Traits can be used to store additional data about your users that would be cumbersome to store within your application. Some possible uses for traits could be:   Storing whether the user has accepted a new set of terms and conditions.  Storing the last viewed page of the application so that you can resume the users place later, across any device.   Generally if they are lower-value pieces of information about your user, it might be simpler/easier to store them in Bullet Train rather than in your core application.  Traits are stored natively as either numbers, strings or booleans.", 
            "title": "Identity Traits"
        }, 
        {
            "location": "/managing-identities/#traits-powering-segments", 
            "text": "When the Segments feature is built, you will be able to specify segments based on Identity Traits.", 
            "title": "Traits powering Segments"
        }, 
        {
            "location": "/managing-segments/", 
            "text": "Segments\n\n\nWe are working on the specification/design for Segments on our \nGithub Page\n. Feel free to contribute!", 
            "title": "Managing Segments"
        }, 
        {
            "location": "/managing-segments/#segments", 
            "text": "We are working on the specification/design for Segments on our  Github Page . Feel free to contribute!", 
            "title": "Segments"
        }, 
        {
            "location": "/clients/javascript/", 
            "text": "This library can be used with pure Javascript, React (and all other popular frameworks/libraries) and React Native projects. The source code for the client is available on \nGithub\n.\n\n\nExample applications for Web and React Native can be found here:\n\n\n\n\nWeb example\n\n\nReact Native example\n\n\n\n\nExamples applications for many popular JS frameworks such as React, Vue and Angular can be found here:\n\n\n\n\nJS framework examples\n\n\n\n\nInstallation\n\n\nNPM\n\n\nnpm i bullet-train-client --save\n\n\n\n\nVia JavaScript CDN\n\n\nscript src=\nhttps://cdn.jsdelivr.net/npm/bullet-train-client/lib/index.js\n/script\n\n\n\n\n\nNPM for React Native\n\n\nnpm i react-native-bullet-train --save\n\n\n\n\nBasic Usage\n\n\nThe SDK is initialised against a single environment within a project on \nhttps://bullet-train.io\n,\nfor example the Development or Production environment. You can find your environment key in the Environment settings page.\n\n\n\n\nExample: Initialising the SDK\n\n\nimport bulletTrain from \nbullet-train-client or react-native-bullet-train\n; //Add this line if you're using bulletTrain via npm\n\nbulletTrain.init({\n    environmentID:\nYOUR_ENVIRONMENT_KEY\n,\n    onChange: (oldFlags,params)=\n{ //Occurs whenever flags are changed\n\n        const {isFromServer} = params; //determines if the update came from the server or local cached storage\n\n        //Check for a feature\n        if (bulletTrain.hasFeature(\nmyCoolFeature\n)){\n            myCoolFeature();\n        }\n\n\n        //Or, use the value of a feature\n        const bannerSize = bulletTrain.getValue(\nbannerSize\n);\n\n        //Check whether value has changed\n        const bannerSizeOld = oldFlags[\nbannerSize\n] \n oldFlags[\nbannerSize\n].value;\n        if (bannerSize !== bannerSizeOld) {\n\n        }\n\n    }\n});\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the Bullet Train dashboard and configure features and traits. You can call this before or after you initialise the project, calling it after will re-fetch features from the API.\n\n\nUser features can be managed by navigating to users on \nhttps://bullet-train.io\n for your desired project.\n \n\n\nExample: Initialising the SDK and identifying as a user\n\n\nimport bulletTrain from 'bullet-train-client';\n\n/*\nCan be called both before or after you're done initialising the project.\nCalling identify before will prevent flags being fetched twice.\n*/\nbulletTrain.identify(\nbullet_train_sample_user\n}); //This will create a user in the dashboard if they don't already exist\nbulletTrain.setTrait(\nfavourite_colour\n,\nblue\n); //This save the trait against the user, it can be queried with bulletTrain.getTrait \n\n//Standard project initialisation\nbulletTrain.init({\n    environmentID: \nQjgYur4LQTwe5HpvbvhpzK\n,\n        onChange: (oldFlags,params)=\n{ //Occurs whenever flags are changed\n\n        const {isFromServer} = params; //determines if the update came from the server or local cached storage\n\n        //Check for a feature\n        if (bulletTrain.hasFeature(\nmyPowerUserFeature\n)){\n            myPowerUserFeature();\n        }\n\n        //Check for a trait\n        if (!bulletTrain.getTrait(\naccepted_cookie_policy\n)){\n            showCookiePolicy();\n        }\n\n        //Or, use the value of a feature\n        const myPowerUserFeature = bulletTrain.getValue(\nmyPowerUserFeature\n);\n\n        //Check whether value has changed\n        const myPowerUserFeatureOld = oldFlags[\nmyPowerUserFeature\n] \n oldFlags[\nmyPowerUserFeature\n].value;\n        if (myPowerUserFeature !== myPowerUserFeatureOld) {\n\n        }\n\n    }\n})\n\n\n\n\nAPI Reference\n\n\nInitialisation options\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nenvironmentID\n\n\nDefines which project environment you wish to get flags for. \nexample ACME Project - Staging.\n\n\nYES\n\n\nnull\n\n\n\n\n\n\nonChange\n\n\nYour callback function for when the flags are retrieved \n(flags,{isFromServer:true/false})=\n{...}\n\n\nYES\n\n\nnull\n\n\n\n\n\n\nonError\n\n\nCallback function on failure to retrieve flags. \n(error)=\n{...}\n\n\n\n\nnull\n\n\n\n\n\n\ndefaultFlags\n\n\nAllows you define default features, these will all be overridden on first retrieval of features.\n\n\n\n\nnull\n\n\n\n\n\n\ndisableCache\n\n\nIf you want to disable local storage of feature flags.\n\n\n\n\nfalse\n\n\n\n\n\n\napi\n\n\nUse this property to define where you're getting feature flags from, e.g. if you're self hosting.\n\n\n\n\nhttps://featureflagger.3qqe.flynnhub.com/api/\n\n\n\n\n\n\n\n\nAvailable Functions\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninit\n\n\nInitialise the sdk against a particular environment\n\n\n\n\n\n\nhasFeature(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.hasFeature(\"powerUserFeature\") // true\n\n\n\n\n\n\ngetValue(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.getValue(\"font_size\") // 10\n\n\n\n\n\n\ngetTrait(key)\n\n\nOnce used with an identified user you can get the value of any trait that is set for them e.g. \nbulletTrain.getTrait(\"accepted_cookie_policy\")\n\n\n\n\n\n\nsetTrait(key, value)\n\n\nOnce used with an identified user you can set the value of any trait relevant to them e.g. \nbulletTrain.setTrait(\"accepted_cookie_policy\", true)\n\n\n\n\n\n\nstartListening(ticks=1000)\n\n\nPoll the api for changes every x milliseconds\n\n\n\n\n\n\nstopListening()\n\n\nStop polling the api\n\n\n\n\n\n\ngetFlags()\n\n\nTrigger a manual fetch of the environment features, if a user is identified it will fetch their features\n\n\n\n\n\n\nidentify(userId)\n\n\nIdentify as a user, this will create a user for your environment in the dashboard if they don't exist, it will also trigger a call to \ngetFlags()\n\n\n\n\n\n\nlogout()\n\n\nStop identifying as a user, this will trigger a call to \ngetFlags()", 
            "title": "Javascript/React Native"
        }, 
        {
            "location": "/clients/javascript/#installation", 
            "text": "NPM  npm i bullet-train-client --save  Via JavaScript CDN  script src= https://cdn.jsdelivr.net/npm/bullet-train-client/lib/index.js /script   NPM for React Native  npm i react-native-bullet-train --save", 
            "title": "Installation"
        }, 
        {
            "location": "/clients/javascript/#basic-usage", 
            "text": "The SDK is initialised against a single environment within a project on  https://bullet-train.io ,\nfor example the Development or Production environment. You can find your environment key in the Environment settings page.   Example: Initialising the SDK  import bulletTrain from  bullet-train-client or react-native-bullet-train ; //Add this line if you're using bulletTrain via npm\n\nbulletTrain.init({\n    environmentID: YOUR_ENVIRONMENT_KEY ,\n    onChange: (oldFlags,params)= { //Occurs whenever flags are changed\n\n        const {isFromServer} = params; //determines if the update came from the server or local cached storage\n\n        //Check for a feature\n        if (bulletTrain.hasFeature( myCoolFeature )){\n            myCoolFeature();\n        }\n\n\n        //Or, use the value of a feature\n        const bannerSize = bulletTrain.getValue( bannerSize );\n\n        //Check whether value has changed\n        const bannerSizeOld = oldFlags[ bannerSize ]   oldFlags[ bannerSize ].value;\n        if (bannerSize !== bannerSizeOld) {\n\n        }\n\n    }\n});", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/clients/javascript/#identifying-users", 
            "text": "Identifying users allows you to target specific users from the Bullet Train dashboard and configure features and traits. You can call this before or after you initialise the project, calling it after will re-fetch features from the API.  User features can be managed by navigating to users on  https://bullet-train.io  for your desired project.\n   Example: Initialising the SDK and identifying as a user  import bulletTrain from 'bullet-train-client';\n\n/*\nCan be called both before or after you're done initialising the project.\nCalling identify before will prevent flags being fetched twice.\n*/\nbulletTrain.identify( bullet_train_sample_user }); //This will create a user in the dashboard if they don't already exist\nbulletTrain.setTrait( favourite_colour , blue ); //This save the trait against the user, it can be queried with bulletTrain.getTrait \n\n//Standard project initialisation\nbulletTrain.init({\n    environmentID:  QjgYur4LQTwe5HpvbvhpzK ,\n        onChange: (oldFlags,params)= { //Occurs whenever flags are changed\n\n        const {isFromServer} = params; //determines if the update came from the server or local cached storage\n\n        //Check for a feature\n        if (bulletTrain.hasFeature( myPowerUserFeature )){\n            myPowerUserFeature();\n        }\n\n        //Check for a trait\n        if (!bulletTrain.getTrait( accepted_cookie_policy )){\n            showCookiePolicy();\n        }\n\n        //Or, use the value of a feature\n        const myPowerUserFeature = bulletTrain.getValue( myPowerUserFeature );\n\n        //Check whether value has changed\n        const myPowerUserFeatureOld = oldFlags[ myPowerUserFeature ]   oldFlags[ myPowerUserFeature ].value;\n        if (myPowerUserFeature !== myPowerUserFeatureOld) {\n\n        }\n\n    }\n})", 
            "title": "Identifying users"
        }, 
        {
            "location": "/clients/javascript/#api-reference", 
            "text": "Initialisation options     Property  Description  Required  Default Value      environmentID  Defines which project environment you wish to get flags for.  example ACME Project - Staging.  YES  null    onChange  Your callback function for when the flags are retrieved  (flags,{isFromServer:true/false})= {...}  YES  null    onError  Callback function on failure to retrieve flags.  (error)= {...}   null    defaultFlags  Allows you define default features, these will all be overridden on first retrieval of features.   null    disableCache  If you want to disable local storage of feature flags.   false    api  Use this property to define where you're getting feature flags from, e.g. if you're self hosting.   https://featureflagger.3qqe.flynnhub.com/api/     Available Functions     Property  Description      init  Initialise the sdk against a particular environment    hasFeature(key)  Get the value of a particular feature e.g.  bulletTrain.hasFeature(\"powerUserFeature\") // true    getValue(key)  Get the value of a particular feature e.g.  bulletTrain.getValue(\"font_size\") // 10    getTrait(key)  Once used with an identified user you can get the value of any trait that is set for them e.g.  bulletTrain.getTrait(\"accepted_cookie_policy\")    setTrait(key, value)  Once used with an identified user you can set the value of any trait relevant to them e.g.  bulletTrain.setTrait(\"accepted_cookie_policy\", true)    startListening(ticks=1000)  Poll the api for changes every x milliseconds    stopListening()  Stop polling the api    getFlags()  Trigger a manual fetch of the environment features, if a user is identified it will fetch their features    identify(userId)  Identify as a user, this will create a user for your environment in the dashboard if they don't exist, it will also trigger a call to  getFlags()    logout()  Stop identifying as a user, this will trigger a call to  getFlags()", 
            "title": "API Reference"
        }, 
        {
            "location": "/clients/node/", 
            "text": "This library can be used with server-side NodeJS projects. The source code for the client is available on \nGithub\n.\n\n\nGetting Started\n\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.\n\n\nInstalling\n\n\nVIA npm\n\n\nnpm i bullet-train-nodejs --save\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://docs.bullet-train.io\n\n\nvar bulletTrain = require(\nbullet-train-nodejs\n);\n\nbulletTrain.init({\n    environmentID: \nYOUR_ENVIRONMENT_KEY\n\n});\n\nbulletTrain.hasFeature(\nheader\n, '\nMy User Id\n')\n    .then((featureEnabled) =\n {\n        if (featureEnabled) {\n            //Show my awesome cool new feature to this one user\n        }\n    });\nbulletTrain.hasFeature(\nheader\n)\n    .then((featureEnabled) =\n {\n        if (featureEnabled) {\n            //Show my awesome cool new feature to the world\n        }\n    });\n\nbulletTrain.getValue(\nheader\n, '\nMy User Id')\n    .then((value) =\n {\n        //Show some unique value to this user\n    });\n\nbulletTrain.getValue(\nheader\n)\n    .then((value) =\n {\n        //Show a value to the world\n    });\n\n\n\n\nAvailable Options\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nenvironmentID\n\n\nDefines which project environment you wish to get flags for. \nexample ACME Project - Staging.\n\n\nYES\n\n\nnull\n\n\n\n\n\n\nonError\n\n\nCallback function on failure to retrieve flags. \n(error)=\n{...}\n\n\nNO\n\n\nnull\n\n\n\n\n\n\ndefaultFlags\n\n\nDefines the default flags if there are any\n\n\nNO\n\n\nnull\n\n\n\n\n\n\napi\n\n\nUse this property to define where you're getting feature flags from, e.g. if you're self hosting.\n\n\nNO\n\n\nhttps://bullet-train-api.dokku1.solidstategroup.com/api/v1/\n\n\n\n\n\n\n\n\nAvailable Functions\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninit\n\n\nInitialise the sdk against a particular environment\n\n\n\n\n\n\nhasFeature(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.hasFeature(\"powerUserFeature\") // true\n\n\n\n\n\n\nhasFeature(key, userId)\n\n\nGet the value of a particular feature for a user e.g. \nbulletTrain.hasFeature(\"powerUserFeature\", 1234) // true\n\n\n\n\n\n\ngetValue(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.getValue(\"font_size\") // 10\n\n\n\n\n\n\ngetValue(key, userId)\n\n\nGet the value of a particular feature for a specificed user e.g. \nbulletTrain.getValue(\"font_size\", 1234) // 15\n\n\n\n\n\n\ngetFlags()\n\n\nTrigger a manual fetch of the environment features\n\n\n\n\n\n\ngetFlagsForUser(userId)\n\n\nTrigger a manual fetch of the environment features for a given user id\n\n\n\n\n\n\ngetUserIdentity(userId)\n\n\nTrigger a manual fetch of both the environment features and users' traits for a given user id\n\n\n\n\n\n\ngetTrait(userId, key)\n\n\nTrigger a manual fetch of a specific trait for a given user id\n\n\n\n\n\n\nsetTrait(userId, key, value)\n\n\nSet a specific trait for a given user id\n\n\n\n\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\nYou can include an optional user identifier as part of the \nhasFeature\n and \ngetValue\n methods to retrieve unique user flags and variables.\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.\n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": "Node"
        }, 
        {
            "location": "/clients/node/#getting-started", 
            "text": "These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/node/#installing", 
            "text": "", 
            "title": "Installing"
        }, 
        {
            "location": "/clients/node/#via-npm", 
            "text": "npm i bullet-train-nodejs --save", 
            "title": "VIA npm"
        }, 
        {
            "location": "/clients/node/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://docs.bullet-train.io  var bulletTrain = require( bullet-train-nodejs );\n\nbulletTrain.init({\n    environmentID:  YOUR_ENVIRONMENT_KEY \n});\n\nbulletTrain.hasFeature( header , ' My User Id ')\n    .then((featureEnabled) =  {\n        if (featureEnabled) {\n            //Show my awesome cool new feature to this one user\n        }\n    });\nbulletTrain.hasFeature( header )\n    .then((featureEnabled) =  {\n        if (featureEnabled) {\n            //Show my awesome cool new feature to the world\n        }\n    });\n\nbulletTrain.getValue( header , ' My User Id')\n    .then((value) =  {\n        //Show some unique value to this user\n    });\n\nbulletTrain.getValue( header )\n    .then((value) =  {\n        //Show a value to the world\n    });  Available Options     Property  Description  Required  Default Value      environmentID  Defines which project environment you wish to get flags for.  example ACME Project - Staging.  YES  null    onError  Callback function on failure to retrieve flags.  (error)= {...}  NO  null    defaultFlags  Defines the default flags if there are any  NO  null    api  Use this property to define where you're getting feature flags from, e.g. if you're self hosting.  NO  https://bullet-train-api.dokku1.solidstategroup.com/api/v1/     Available Functions     Property  Description      init  Initialise the sdk against a particular environment    hasFeature(key)  Get the value of a particular feature e.g.  bulletTrain.hasFeature(\"powerUserFeature\") // true    hasFeature(key, userId)  Get the value of a particular feature for a user e.g.  bulletTrain.hasFeature(\"powerUserFeature\", 1234) // true    getValue(key)  Get the value of a particular feature e.g.  bulletTrain.getValue(\"font_size\") // 10    getValue(key, userId)  Get the value of a particular feature for a specificed user e.g.  bulletTrain.getValue(\"font_size\", 1234) // 15    getFlags()  Trigger a manual fetch of the environment features    getFlagsForUser(userId)  Trigger a manual fetch of the environment features for a given user id    getUserIdentity(userId)  Trigger a manual fetch of both the environment features and users' traits for a given user id    getTrait(userId, key)  Trigger a manual fetch of a specific trait for a given user id    setTrait(userId, key, value)  Set a specific trait for a given user id     Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .\nYou can include an optional user identifier as part of the  hasFeature  and  getValue  methods to retrieve unique user flags and variables.", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/node/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/node/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/node/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }, 
        {
            "location": "/clients/java/", 
            "text": "This library can be used with server-side Java and Android applications. The source code for the client is available on \nGithub\n.\n\n\nGetting Started\n\n\nQuick Setup\n\n\nThe client library is available from the Central Maven Repository and can be added to your project by many tools:\n\n\nMaven\n\n\nAdd following dependencies to your project in \npom.xml\n\n\ndependency\n\n  \ngroupId\ncom.solidstategroup\n/groupId\n\n  \nartifactId\nbullet-train-client\n/artifactId\n\n  \nversion\n1.1\n/version\n\n\n/dependency\n\n\n\n\n\nGradle\n\n\nimplementation 'com.solidstategroup:bullet-train-client:1.1'\n\n\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://bullet-train.io/documentation\n\n\nSign Up and create account at \nhttps://bullet-train.io/\n\n\nIn your application initialise BulletTrain client with your API key\n\n\nBulletTrainClient bulletClient = BulletTrainClient.newBuilder()\n                .setApiKey(\nYOUR_ENV_API_KEY\n)\n                .build();\n\n\n\n\nTo check if feature flag exist and enabled:\n\n\nboolean featureEnabled = bulletClient.hasFeatureFlag(\nmy_test_feature\n);\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}\n\n\n\n\nTo get configuration value for feature flag:\n\n\nString myRemoteConfig = bulletClient.getFeatureFlagValue(\nmy_test_feature\n);\nif (myRemoteConfig != null) {    \n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\n\n\nTo check if feature exist for given user context:\n\n\nUser user = new User();\nuser.setIdentifier(\nbullet_train_sample_user\n);\n\nboolean featureEnabled = bulletClient.hasFeatureFlag(\nmy_test_feature\n, user);\nif (featureEnabled) {\n    String myRemoteConfig = bulletClient.getFeatureFlagValue(\nmy_test_feature\n, user);\n    // run the code for to execute enabled feature for given user\n} else {\n    // run the code if feature switched off\n}\n\n\n\n\nTo get configuration value for feature flag for given user context:\n\n\nString myRemoteConfig = bulletClient.getFeatureFlagValue(\nmy_test_feature\n, user);\nif (myRemoteConfig != null) {    \n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n\n\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. \n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": "Java"
        }, 
        {
            "location": "/clients/java/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/java/#quick-setup", 
            "text": "The client library is available from the Central Maven Repository and can be added to your project by many tools:", 
            "title": "Quick Setup"
        }, 
        {
            "location": "/clients/java/#maven", 
            "text": "Add following dependencies to your project in  pom.xml  dependency \n   groupId com.solidstategroup /groupId \n   artifactId bullet-train-client /artifactId \n   version 1.1 /version  /dependency", 
            "title": "Maven"
        }, 
        {
            "location": "/clients/java/#gradle", 
            "text": "implementation 'com.solidstategroup:bullet-train-client:1.1'", 
            "title": "Gradle"
        }, 
        {
            "location": "/clients/java/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://bullet-train.io/documentation  Sign Up and create account at  https://bullet-train.io/  In your application initialise BulletTrain client with your API key  BulletTrainClient bulletClient = BulletTrainClient.newBuilder()\n                .setApiKey( YOUR_ENV_API_KEY )\n                .build();  To check if feature flag exist and enabled:  boolean featureEnabled = bulletClient.hasFeatureFlag( my_test_feature );\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}  To get configuration value for feature flag:  String myRemoteConfig = bulletClient.getFeatureFlagValue( my_test_feature );\nif (myRemoteConfig != null) {    \n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}  Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .  To check if feature exist for given user context:  User user = new User();\nuser.setIdentifier( bullet_train_sample_user );\n\nboolean featureEnabled = bulletClient.hasFeatureFlag( my_test_feature , user);\nif (featureEnabled) {\n    String myRemoteConfig = bulletClient.getFeatureFlagValue( my_test_feature , user);\n    // run the code for to execute enabled feature for given user\n} else {\n    // run the code if feature switched off\n}  To get configuration value for feature flag for given user context:  String myRemoteConfig = bulletClient.getFeatureFlagValue( my_test_feature , user);\nif (myRemoteConfig != null) {    \n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/java/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/java/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/java/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }, 
        {
            "location": "/clients/python/", 
            "text": "This library can be used with server-side Python projects. The source code for the client is available on \nGithub\n.\n\n\nGetting Started\n\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.\n\n\nInstalling\n\n\nVIA pip\n\n\npip install bullet-train\n\n\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://docs.bullet-train.io\n\n\nfrom bullet_train import BulletTrain;\n\nbt = BulletTrain(environment_id=\nYOUR_ENVIRONMENT_KEY\n)\n\nif bt.has_feature(\nheader\n, '\nMy User Id\n'):\n  if bt.feature_enabled(\nheader\n):\n    # Show my awesome cool new feature to the world\n\nif bt.has_feature(\nheader\n):\n  if bt.feature_enabled(\nheader\n):\n    # Show my awesome cool new feature to the world\n\nvalue = bt.get_value(\nheader\n, '\nMy User Id\n')\n\nvalue = bt.get_value(\nheader\n)\n\n\n\n\nAvailable Options\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nenvironment_id\n\n\nDefines which project environment you wish to get flags for. \nexample ACME Project - Staging.\n\n\nYES\n\n\nNone\n\n\n\n\n\n\napi\n\n\nUse this property to define where you're getting feature flags from, e.g. if you're self hosting.\n\n\nNO\n\n\nhttps://api.bullet-train.io/api/\n\n\n\n\n\n\n\n\nAvailable Functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhas_feature(key)\n\n\nGet the value of a particular feature e.g. \nbt.has_feature(\"powerUserFeature\") // true\n\n\n\n\n\n\nhas_feature(key, user_id)\n\n\nGet the value of a particular feature for a user e.g. \nbt.has_feature(\"powerUserFeature\", 1234) // true\n\n\n\n\n\n\nget_value(key)\n\n\nGet the value of a particular feature e.g. \nbt.get_value(\"font_size\") // 10\n\n\n\n\n\n\nget_value(key, userId)\n\n\nGet the value of a particular feature for a specified user e.g. \nbt.get_value(\"font_size\", 1234) // 15\n\n\n\n\n\n\nget_flags()\n\n\nTrigger a manual fetch of the environment features, returns a list of flag objects, see below for returned data\n\n\n\n\n\n\nget_flags_for_user(1234)\n\n\nTrigger a manual fetch of the environment features with a given user id, returns a list of flag objects, see below for returned data\n\n\n\n\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\nYou can include an optional user identifier as part of the \nhas_feature\n and \nget_value\n methods to retrieve unique user flags and variables.\n\n\nFlags data structure\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nid\n\n\nInternal id of feature state\n\n\nInteger\n\n\n\n\n\n\nenabled\n\n\nWhether feature is enabled or not\n\n\nBoolean\n\n\n\n\n\n\nenvironment\n\n\nInternal ID of environment\n\n\nInteger\n\n\n\n\n\n\nfeature_state_value\n\n\nValue of the feature\n\n\nAny - determined based on data input on \nbullet-train.io\n.\n\n\n\n\n\n\nfeature\n\n\nFeature object - see below for details\n\n\nObject\n\n\n\n\n\n\n\n\nFeature data structure\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nid\n\n\nInternal id of feature\n\n\nInteger\n\n\n\n\n\n\nname\n\n\nName of the feature (sometimes referred to as key or ID)\n\n\nString\n\n\n\n\n\n\ndescription\n\n\nDescription of the feature\n\n\nString\n\n\n\n\n\n\ntype\n\n\nFeature Type. Can be FLAG or CONFIG\n\n\nString\n\n\n\n\n\n\ncreated_date\n\n\nDate feature was created\n\n\nDatetime\n\n\n\n\n\n\ninital_value\n\n\nThe initial / default value set for all feature states on creation\n\n\nString\n\n\n\n\n\n\nproject\n\n\nInternal ID of the associated project\n\n\nInteger\n\n\n\n\n\n\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. \n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": "Python"
        }, 
        {
            "location": "/clients/python/#getting-started", 
            "text": "These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/python/#installing", 
            "text": "", 
            "title": "Installing"
        }, 
        {
            "location": "/clients/python/#via-pip", 
            "text": "pip install bullet-train", 
            "title": "VIA pip"
        }, 
        {
            "location": "/clients/python/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://docs.bullet-train.io  from bullet_train import BulletTrain;\n\nbt = BulletTrain(environment_id= YOUR_ENVIRONMENT_KEY )\n\nif bt.has_feature( header , ' My User Id '):\n  if bt.feature_enabled( header ):\n    # Show my awesome cool new feature to the world\n\nif bt.has_feature( header ):\n  if bt.feature_enabled( header ):\n    # Show my awesome cool new feature to the world\n\nvalue = bt.get_value( header , ' My User Id ')\n\nvalue = bt.get_value( header )  Available Options     Property  Description  Required  Default Value      environment_id  Defines which project environment you wish to get flags for.  example ACME Project - Staging.  YES  None    api  Use this property to define where you're getting feature flags from, e.g. if you're self hosting.  NO  https://api.bullet-train.io/api/     Available Functions     Function  Description      has_feature(key)  Get the value of a particular feature e.g.  bt.has_feature(\"powerUserFeature\") // true    has_feature(key, user_id)  Get the value of a particular feature for a user e.g.  bt.has_feature(\"powerUserFeature\", 1234) // true    get_value(key)  Get the value of a particular feature e.g.  bt.get_value(\"font_size\") // 10    get_value(key, userId)  Get the value of a particular feature for a specified user e.g.  bt.get_value(\"font_size\", 1234) // 15    get_flags()  Trigger a manual fetch of the environment features, returns a list of flag objects, see below for returned data    get_flags_for_user(1234)  Trigger a manual fetch of the environment features with a given user id, returns a list of flag objects, see below for returned data     Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .\nYou can include an optional user identifier as part of the  has_feature  and  get_value  methods to retrieve unique user flags and variables.  Flags data structure     Field  Description  Type      id  Internal id of feature state  Integer    enabled  Whether feature is enabled or not  Boolean    environment  Internal ID of environment  Integer    feature_state_value  Value of the feature  Any - determined based on data input on  bullet-train.io .    feature  Feature object - see below for details  Object     Feature data structure     Field  Description  Type      id  Internal id of feature  Integer    name  Name of the feature (sometimes referred to as key or ID)  String    description  Description of the feature  String    type  Feature Type. Can be FLAG or CONFIG  String    created_date  Date feature was created  Datetime    inital_value  The initial / default value set for all feature states on creation  String    project  Internal ID of the associated project  Integer", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/python/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/python/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/python/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }, 
        {
            "location": "/clients/ruby/", 
            "text": "Bullet Train Client\n\n\nThe SDK clients for Ruby \nhttps://bullet-train.io/\n. Bullet Train allows you to manage feature flags and remote config across multiple projects, environments and organisations.\n\n\nGetting Started\n\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.\n\n\nInstalling\n\n\nVIA gem\n\n\ngem install bullet-train-client\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://docs.bullet-train.io\n\n\nrequire \nbullet-train-ruby-client\n\n\nbt = BulletTrain.new(\nYour API KEY\n)\n\nif bt.getValue(\nfont_size\n)\n  #    Do something awesome with the font size\nend\n\nif bt.hasFeature(\ndoes_not_exist\n)\n  #do something\nelse\n  #do nothing, or something else\nend\n\n\n\n\n\nAvailable Options\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nenvironmentID\n\n\nDefines which project environment you wish to get flags for. \nexample ACME Project - Staging.\n\n\nYES\n\n\nnull\n\n\n\n\n\n\nonError\n\n\nCallback function on failure to retrieve flags. \n(error)=\n{...}\n\n\nNO\n\n\nnull\n\n\n\n\n\n\ndefaultFlags\n\n\nDefines the default flags if there are any\n\n\nNO\n\n\nnull\n\n\n\n\n\n\napi\n\n\nUse this property to define where you're getting feature flags from, e.g. if you're self hosting.\n\n\nNO\n\n\nhttps://bullet-train-api.dokku1.solidstategroup.com/api/v1/\n\n\n\n\n\n\n\n\nAvailable Functions\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninit\n\n\nInitialise the sdk against a particular environment\n\n\n\n\n\n\nhasFeature(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.hasFeature(\"powerUserFeature\") // true\n\n\n\n\n\n\nhasFeature(key, userId)\n\n\nGet the value of a particular feature for a user e.g. \nbulletTrain.hasFeature(\"powerUserFeature\", 1234) // true\n\n\n\n\n\n\ngetValue(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.getValue(\"font_size\") // 10\n\n\n\n\n\n\ngetValue(keym userId)\n\n\nGet the value of a particular feature for a specificed user e.g. \nbulletTrain.getValue(\"font_size\", 1234) // 15\n\n\n\n\n\n\ngetFlags()\n\n\nTrigger a manual fetch of the environment features, if a user is identified it will fetch their features\n\n\n\n\n\n\ngetFlagsForUser(1234)\n\n\nTrigger a manual fetch of the environment features with a given user id\n\n\n\n\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\nYou can include an optional user identifier as part of the \nhasFeature\n and \ngetValue\n methods to retrieve unique user flags and variables.\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. \n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": "Ruby"
        }, 
        {
            "location": "/clients/ruby/#bullet-train-client", 
            "text": "The SDK clients for Ruby  https://bullet-train.io/ . Bullet Train allows you to manage feature flags and remote config across multiple projects, environments and organisations.", 
            "title": "Bullet Train Client"
        }, 
        {
            "location": "/clients/ruby/#getting-started", 
            "text": "These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/ruby/#installing", 
            "text": "", 
            "title": "Installing"
        }, 
        {
            "location": "/clients/ruby/#via-gem", 
            "text": "gem install bullet-train-client", 
            "title": "VIA gem"
        }, 
        {
            "location": "/clients/ruby/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://docs.bullet-train.io  require  bullet-train-ruby-client \n\nbt = BulletTrain.new( Your API KEY )\n\nif bt.getValue( font_size )\n  #    Do something awesome with the font size\nend\n\nif bt.hasFeature( does_not_exist )\n  #do something\nelse\n  #do nothing, or something else\nend  Available Options     Property  Description  Required  Default Value      environmentID  Defines which project environment you wish to get flags for.  example ACME Project - Staging.  YES  null    onError  Callback function on failure to retrieve flags.  (error)= {...}  NO  null    defaultFlags  Defines the default flags if there are any  NO  null    api  Use this property to define where you're getting feature flags from, e.g. if you're self hosting.  NO  https://bullet-train-api.dokku1.solidstategroup.com/api/v1/     Available Functions     Property  Description      init  Initialise the sdk against a particular environment    hasFeature(key)  Get the value of a particular feature e.g.  bulletTrain.hasFeature(\"powerUserFeature\") // true    hasFeature(key, userId)  Get the value of a particular feature for a user e.g.  bulletTrain.hasFeature(\"powerUserFeature\", 1234) // true    getValue(key)  Get the value of a particular feature e.g.  bulletTrain.getValue(\"font_size\") // 10    getValue(keym userId)  Get the value of a particular feature for a specificed user e.g.  bulletTrain.getValue(\"font_size\", 1234) // 15    getFlags()  Trigger a manual fetch of the environment features, if a user is identified it will fetch their features    getFlagsForUser(1234)  Trigger a manual fetch of the environment features with a given user id     Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .\nYou can include an optional user identifier as part of the  hasFeature  and  getValue  methods to retrieve unique user flags and variables.", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/ruby/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/ruby/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/ruby/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }, 
        {
            "location": "/clients/dotnet/", 
            "text": "This SDK can be used for .NET Core, .NET Framework, Mono, Xamarin and Universal Windows Platform applications. The source code for the client is available on \nGithub\n.\n\n\nGetting Started\n\n\nQuick Setup\n\n\nThe client library is available from NuGet and can be added to your project by many tools. You can find the package here \nhttps://www.nuget.org/packages/BulletTrain/\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://docs.bullet-train.io\n\n\nSign Up and create account at \nhttps://bullet-train.io/\n\n\nIn your application initialise the Bullet Train client with your environment API key\n\n\nBulletTrainClient bulletClient = new BulletTrainClient() {\n  environmentKey: \nenvironment-key-here\n\n};\n\n\n\n\nTo check if a feature flag exists and is enabled:\n\n\nbool featureEnabled = await bulletClient.HasFeatureFlag(\nmy_test_feature\n);\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}\n\n\n\n\nTo get a remote config feature value:\n\n\nstring myRemoteConfig = await bulletClient.GetFeatureValue(\nmy_test_feature\n);\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\n\n\nTo check if a feature exists and is enabled for a specific user:\n\n\nbool featureEnabled = await bulletClient.HasFeatureFlag(\nmy_test_feature\n, \nmy_user_id\n);\nif (featureEnabled) {\n    // run the code to execute enabled feature for given user\n} else {\n    // run the code when feature switched off\n}\n\n\n\n\nTo get a remote config value for specific user:\n\n\nstring myRemoteConfig = await bulletClient.GetFeatureValue(\nmy_test_feature\n, \nmy_user_id\n);\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n\n\n\n\nTo get user traits:\n\n\nList\nTrait\n userTraits = await bulletClient.GetTraits(\nmy_user_id\n)\nif (userTraits != null \n userTraits) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}\n\n\n\n\nTo get a specific user trait:\n\n\nTrait userTrait = await bulletClient.GetTrait(\nmy_user_id\n, \ncookies_key\n);\nif (userTrait != null) {\n    // run the code to use user trait\n} else {\n    // run the code without user trait\n}\n\n\n\n\nTo get filtered user traits:\n\n\nList\nTrait\n userTraits = await bulletClient.GetTraits(\nmy_user_id\n, new List\nstring\n { \nspecific_key\n, /* rest of elements */ });\nif (userTraits != null) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}\n\n\n\n\nTo set or update a user trait:\n\n\nTrait userTrait = await bulletClient.SetTrait(\nmy_user_id\n, \nmy_user_trait\n, \nblue\n);\n\n\n\n\nTo retrieve a user identity (both features and traits):\n\n\nIdentity userIdentity = await bulletClient.GetUserIdentity(\nmy_user_id\n);\nif (userIdentity != null) {\n  // Run the code to use user identity i.e. userIdentity.flags or userIdentity.traits\n}\n\n\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.\n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": ".Net"
        }, 
        {
            "location": "/clients/dotnet/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/dotnet/#quick-setup", 
            "text": "The client library is available from NuGet and can be added to your project by many tools. You can find the package here  https://www.nuget.org/packages/BulletTrain/", 
            "title": "Quick Setup"
        }, 
        {
            "location": "/clients/dotnet/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://docs.bullet-train.io  Sign Up and create account at  https://bullet-train.io/  In your application initialise the Bullet Train client with your environment API key  BulletTrainClient bulletClient = new BulletTrainClient() {\n  environmentKey:  environment-key-here \n};  To check if a feature flag exists and is enabled:  bool featureEnabled = await bulletClient.HasFeatureFlag( my_test_feature );\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}  To get a remote config feature value:  string myRemoteConfig = await bulletClient.GetFeatureValue( my_test_feature );\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}  Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .  To check if a feature exists and is enabled for a specific user:  bool featureEnabled = await bulletClient.HasFeatureFlag( my_test_feature ,  my_user_id );\nif (featureEnabled) {\n    // run the code to execute enabled feature for given user\n} else {\n    // run the code when feature switched off\n}  To get a remote config value for specific user:  string myRemoteConfig = await bulletClient.GetFeatureValue( my_test_feature ,  my_user_id );\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}  To get user traits:  List Trait  userTraits = await bulletClient.GetTraits( my_user_id )\nif (userTraits != null   userTraits) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}  To get a specific user trait:  Trait userTrait = await bulletClient.GetTrait( my_user_id ,  cookies_key );\nif (userTrait != null) {\n    // run the code to use user trait\n} else {\n    // run the code without user trait\n}  To get filtered user traits:  List Trait  userTraits = await bulletClient.GetTraits( my_user_id , new List string  {  specific_key , /* rest of elements */ });\nif (userTraits != null) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}  To set or update a user trait:  Trait userTrait = await bulletClient.SetTrait( my_user_id ,  my_user_trait ,  blue );  To retrieve a user identity (both features and traits):  Identity userIdentity = await bulletClient.GetUserIdentity( my_user_id );\nif (userIdentity != null) {\n  // Run the code to use user identity i.e. userIdentity.flags or userIdentity.traits\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/dotnet/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/dotnet/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/dotnet/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }
    ]
}