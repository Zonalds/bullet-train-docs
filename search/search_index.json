{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\nBullet Train\n lets you manage features across web, mobile and server side applications. Bullet Train is 100% Open Source. Host yourself or let us take care of the hosting.\n\n\nThe application consist of 3 components:\n\n\n\n\nThe \nServer-Side REST API\n.\n\n\nThe \nFront End Administration Web Interface\n.\n\n\nClient Libraries.\n\n\n\n\nTo get up and running, you can either use \nhttps://bullet-train.io/\n for 1 and 2 above, or you can self host the API and Front End. Once you have these components up and running, you can add the client libraries to your apps and start managing your features remotely.\n\n\nInstallation\n\n\nServer Side API\n\n\nThe source code and installation instructions can be found at \nthe GitHub project\n.\n\n\nFront End Website\n\n\nThe source code and installation instructions can be found at \nthe GitHub project\n.\n\n\nClient Libraries\n\n\nOnce you are setup with the front and back end, you can integrate our client libraries with your apps.\n\n\n\n\nJavascript and React/React Native\n\n\niOS\n\n\nNodeJS\n\n\nJava\n\n\nPython\n\n\nRuby\n\n\n.Net\n\n\n\n\nJavascript framework examples\n\n\nExamples applications for popular JS frameswork can be found here:\n\n\n\n\nJS framework examples\n\n\n\n\nWhat Next\n\n\nFind out more about \nManaging Features", 
            "title": "Overview and Install"
        }, 
        {
            "location": "/#overview", 
            "text": "Bullet Train  lets you manage features across web, mobile and server side applications. Bullet Train is 100% Open Source. Host yourself or let us take care of the hosting.  The application consist of 3 components:   The  Server-Side REST API .  The  Front End Administration Web Interface .  Client Libraries.   To get up and running, you can either use  https://bullet-train.io/  for 1 and 2 above, or you can self host the API and Front End. Once you have these components up and running, you can add the client libraries to your apps and start managing your features remotely.", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#server-side-api", 
            "text": "The source code and installation instructions can be found at  the GitHub project .", 
            "title": "Server Side API"
        }, 
        {
            "location": "/#front-end-website", 
            "text": "The source code and installation instructions can be found at  the GitHub project .", 
            "title": "Front End Website"
        }, 
        {
            "location": "/#client-libraries", 
            "text": "Once you are setup with the front and back end, you can integrate our client libraries with your apps.   Javascript and React/React Native  iOS  NodeJS  Java  Python  Ruby  .Net", 
            "title": "Client Libraries"
        }, 
        {
            "location": "/#javascript-framework-examples", 
            "text": "Examples applications for popular JS frameswork can be found here:   JS framework examples", 
            "title": "Javascript framework examples"
        }, 
        {
            "location": "/#what-next", 
            "text": "Find out more about  Managing Features", 
            "title": "What Next"
        }, 
        {
            "location": "/hosted-service/", 
            "text": "Hosted Service\n\n\nIf you would rather skip the hosting and jump straight to integrating Bullet Train with your own application, you can use \nhttps://bullet-train.io/\n right now.\n\n\nWe are going to be bringing paid plans to the service soon, with pricing to suit startups, not enterprise customers.\n\n\nIf you want to discuss hosting options, \nplease get in touch\n.", 
            "title": "Hosted Service"
        }, 
        {
            "location": "/hosted-service/#hosted-service", 
            "text": "If you would rather skip the hosting and jump straight to integrating Bullet Train with your own application, you can use  https://bullet-train.io/  right now.  We are going to be bringing paid plans to the service soon, with pricing to suit startups, not enterprise customers.  If you want to discuss hosting options,  please get in touch .", 
            "title": "Hosted Service"
        }, 
        {
            "location": "/managing-features/", 
            "text": "Feature Flags\n\n\nFeature Flags are a development methodology that allow you to ship code and features before they are finished. This greatly benefits Continuous Integration and Continuous Deployment (CI/CD). The typical workflow for this is as follows.\n\n\n\n\nYou are about to start work on a new feature. Lets imaging you are going to implement a sharing button with your application.\n\n\nCreate a new Feature Flag in Bullet Train, calling it \"sharing_button\". Set it to enabled on your development environment, and disabled on your production environment.\n\n\nStart working on the feature. Whenever you write code that shows the button within the UI, wrap it in a conditional statement, testing against the value of the flag \"sharing button\". Only show the button if the flag is set to True.\n\n\nBecause your button only shows when the \"sharing_button\" flag is set to True, you are safe to commit your code as you work on the feature. Your code will be live within the production platform, but the functionality is hidden behind the flag.\n\n\nOnce you are happy with your Feature, you can enable the \"sharing_button\" for other members of your team and with Beta testers.\n\n\nIf everything is working as intended, simply flip the \"sharing_button\" flag to True for everyone in your production environment, and your feature is rolled out.\n\n\n\n\nIf you want to learn more about Feature Flags, \nFlickr wrote the seminal blog post on it in 2009.\n\n\nFlags within Bullet Train can be defined either as a boolean value, or as a String of text. This allows you to use Bullet Train in the multiple ways.\n\n\n\n\nShowing and hiding features in your application. E.g. A sharing button within an application.\n\n\nConfiguring values used within your application remotely. E.g. The number of power-ups a user might have in a game.\n\n\nConfiguring environment variables. E.g. Setting the database URL for your API.\n\n\n\n\nFeatures are created on a per project basis but edited per environment and can then be overridden on a per user basis.\n\n\nOrganisations\n\n\nOrganisations are a way for you and other team members to manage projects and their features. Users can be members of multiple organisations.\n\n\nProjects\n\n\nProjects contain one or more environments that share a single set of features and one or more environments. Organisations can have any number of projects.\n\n\nEnvironments\n\n\nEnvironments are a way to separate the configuration of your features. For example, your project's Development and Staging environments might have a feature configured as on while it is turned off in your Production environment. A project can have any number of environments.\n\n\nIdentities\n\n\nIdentities are a particular user registration for one of your Project's environments. Registering identities within the client application allows you to manage features for individual users. Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.\n\n\nFor more info see \nIdentities\n.\n\n\nTraits\n\n\nYou can store any number of Traits against an Identity. Traits are simple name:value pairs that can store any type of data. Some examples of traits that you might store against an Identity might be:\n\n\n\n\nThe number of times the user has logged in.\n\n\nIf they have accepted the application terms and conditions.\n\n\nTheir preference for application theme.\n\n\nIf they have performed certain actions within your application.\n\n\n\n\nFor more info see \nTraits\n.\n\n\nSegments\n\n\nSegments are a way to define a group of users by traits such as number of times logged in, device, location or any number of custom defined traits.\n\n\nSimilarly to individual users, you will be able to override environment defaults for features. For example showing certain features for a \"power user\" segment.\n\n\nFor more info see \nSegments\n.", 
            "title": "Managing Features"
        }, 
        {
            "location": "/managing-features/#feature-flags", 
            "text": "Feature Flags are a development methodology that allow you to ship code and features before they are finished. This greatly benefits Continuous Integration and Continuous Deployment (CI/CD). The typical workflow for this is as follows.   You are about to start work on a new feature. Lets imaging you are going to implement a sharing button with your application.  Create a new Feature Flag in Bullet Train, calling it \"sharing_button\". Set it to enabled on your development environment, and disabled on your production environment.  Start working on the feature. Whenever you write code that shows the button within the UI, wrap it in a conditional statement, testing against the value of the flag \"sharing button\". Only show the button if the flag is set to True.  Because your button only shows when the \"sharing_button\" flag is set to True, you are safe to commit your code as you work on the feature. Your code will be live within the production platform, but the functionality is hidden behind the flag.  Once you are happy with your Feature, you can enable the \"sharing_button\" for other members of your team and with Beta testers.  If everything is working as intended, simply flip the \"sharing_button\" flag to True for everyone in your production environment, and your feature is rolled out.   If you want to learn more about Feature Flags,  Flickr wrote the seminal blog post on it in 2009.  Flags within Bullet Train can be defined either as a boolean value, or as a String of text. This allows you to use Bullet Train in the multiple ways.   Showing and hiding features in your application. E.g. A sharing button within an application.  Configuring values used within your application remotely. E.g. The number of power-ups a user might have in a game.  Configuring environment variables. E.g. Setting the database URL for your API.   Features are created on a per project basis but edited per environment and can then be overridden on a per user basis.", 
            "title": "Feature Flags"
        }, 
        {
            "location": "/managing-features/#organisations", 
            "text": "Organisations are a way for you and other team members to manage projects and their features. Users can be members of multiple organisations.", 
            "title": "Organisations"
        }, 
        {
            "location": "/managing-features/#projects", 
            "text": "Projects contain one or more environments that share a single set of features and one or more environments. Organisations can have any number of projects.", 
            "title": "Projects"
        }, 
        {
            "location": "/managing-features/#environments", 
            "text": "Environments are a way to separate the configuration of your features. For example, your project's Development and Staging environments might have a feature configured as on while it is turned off in your Production environment. A project can have any number of environments.", 
            "title": "Environments"
        }, 
        {
            "location": "/managing-features/#identities", 
            "text": "Identities are a particular user registration for one of your Project's environments. Registering identities within the client application allows you to manage features for individual users. Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.  For more info see  Identities .", 
            "title": "Identities"
        }, 
        {
            "location": "/managing-features/#traits", 
            "text": "You can store any number of Traits against an Identity. Traits are simple name:value pairs that can store any type of data. Some examples of traits that you might store against an Identity might be:   The number of times the user has logged in.  If they have accepted the application terms and conditions.  Their preference for application theme.  If they have performed certain actions within your application.   For more info see  Traits .", 
            "title": "Traits"
        }, 
        {
            "location": "/managing-features/#segments", 
            "text": "Segments are a way to define a group of users by traits such as number of times logged in, device, location or any number of custom defined traits.  Similarly to individual users, you will be able to override environment defaults for features. For example showing certain features for a \"power user\" segment.  For more info see  Segments .", 
            "title": "Segments"
        }, 
        {
            "location": "/managing-identities/", 
            "text": "Identities\n\n\nIdentities are created within Bullet Train automatically the first time they are identified from your client SDKs. Generally you'd make a call to identify a user with a unique string/id whenever they log into your app/site.\n\n\nIdentity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.\n\n\nIdentity Feature Flags\n\n\nBy default, Identities receive the default flags for their environment. The main use for identities is to be able to override flags and configs on a per-identity basis. You can do this by navigating to the Users page, finding the user and modifying their flags.\n\n\nIdentity Traits\n\n\nYou can also use Bullet Train to store 'Traits' against identities. Traits are simply key/value pairs that are associated with individual Identities. Traits can be used to store additional data about your users that would be cumbersome to store within your application. Some possible uses for traits could be:\n\n\n\n\nStoring whether the user has accepted a new set of terms and conditions.\n\n\nStoring the last viewed page of the application so that you can resume the users place later, across any device.\n\n\n\n\nGenerally if they are lower-value pieces of information about your user, it might be simpler/easier to store them in Bullet Train rather than in your core application.\n\n\nTraits are stored natively as either numbers, strings or booleans.\n\n\nTraits powering Segments\n\n\nTraits can be used within your application, but they also be used to power \nSegments\n.", 
            "title": "Managing Identities"
        }, 
        {
            "location": "/managing-identities/#identities", 
            "text": "Identities are created within Bullet Train automatically the first time they are identified from your client SDKs. Generally you'd make a call to identify a user with a unique string/id whenever they log into your app/site.  Identity features can be overridden from your environment defaults. For example, joe@yourwebsite.com would be a different identity in your development environment to the one in production, and they can have different features enabled for each environment.", 
            "title": "Identities"
        }, 
        {
            "location": "/managing-identities/#identity-feature-flags", 
            "text": "By default, Identities receive the default flags for their environment. The main use for identities is to be able to override flags and configs on a per-identity basis. You can do this by navigating to the Users page, finding the user and modifying their flags.", 
            "title": "Identity Feature Flags"
        }, 
        {
            "location": "/managing-identities/#identity-traits", 
            "text": "You can also use Bullet Train to store 'Traits' against identities. Traits are simply key/value pairs that are associated with individual Identities. Traits can be used to store additional data about your users that would be cumbersome to store within your application. Some possible uses for traits could be:   Storing whether the user has accepted a new set of terms and conditions.  Storing the last viewed page of the application so that you can resume the users place later, across any device.   Generally if they are lower-value pieces of information about your user, it might be simpler/easier to store them in Bullet Train rather than in your core application.  Traits are stored natively as either numbers, strings or booleans.", 
            "title": "Identity Traits"
        }, 
        {
            "location": "/managing-identities/#traits-powering-segments", 
            "text": "Traits can be used within your application, but they also be used to power  Segments .", 
            "title": "Traits powering Segments"
        }, 
        {
            "location": "/managing-segments/", 
            "text": "Segments\n\n\nSegments allow you to group your users based on a set of rules, and then control Feature Flags and Remote Config for those groups. You can create a Segment and then override a Feature Flag state or Remote Config value for that segment of users.\n\n\nExample - Beta Users\n\n\nLet's say that you want all your team to automatically be defined as \nBeta Users\n. Right now, all your logged in users are \nidentified\n with their email address along with some other \ntraits\n.\n\n\nYou create a new Segment, call it \nBeta Users\n, and define a single rule:\n\n\n\n\nemail_address\n contains \n@bullet-train.io\n\n\n\n\n\n\nOnce the Segment has been defined, you can then associate that Segment with a specific Feature Flag. To do this, edit the Feature Flag that you want to connect our Segment to. You then have the option of connecting a Segment to the Feature. If the Identified user is a member of that Segment, the flag will be overridden.\n\n\n\n\nFor all the Feature Flags that relate to Beta features, you can associate this \nBeta Users\n segment with each Flag, and set the Flag value to \ntrue\n for that Segment. To do this, edit the Feature Flag and select the segment in the 'Segment Overrides' drop down.\n\n\nAt this point, all users who log in with an email address that contains \n@bullet-train.io\n will have all Beta features enabled.\n\n\nLet's say that you then partner with another company who need access to all Beta features. You can then simply modify the Segment rules:\n\n\n\n\nemail_address\n contains \n@bullet-train.io\n\n\nemail_address\n contains \n@solidstategroup.com\n\n\n\n\nNow all users who log in with a \n@solidstategroup.com\n email address are automatically included in beta features. \n\n\nFeature Flag and Remote Config Precedence\n\n\nFeature Flag states and Remote Config values can be defined in 3 different places:\n\n\n\n\nThe default Flag/Config value itself\n\n\nThe Segment associated with the Flag/Config\n\n\nOverridden at an Identity level\n\n\n\n\nFor example, a Feature Flag \nShow Paypal Checkout\n could be set to \nfalse\n on the Flag itself, \ntrue\n in the Beta Users segment, and then overridden as \nfalse\n for a specific Identity. \n\n\nIn order to deal with this situation, there is an order of priority:\n\n\n\n\nIf the Identity has an override value, this is returned ahead of Segments and Flags/Config\n\n\nIf there's no Identity override, the Segment is checked and returned if valid\n\n\nIf no Identity or Segment overrides the value, the default Flag/Config value is used\n\n\n\n\nMore simply, the order of precendence is:\n\n\n\n\nIdentity\n\n\nSegment\n\n\nFlag", 
            "title": "Managing Segments"
        }, 
        {
            "location": "/managing-segments/#segments", 
            "text": "Segments allow you to group your users based on a set of rules, and then control Feature Flags and Remote Config for those groups. You can create a Segment and then override a Feature Flag state or Remote Config value for that segment of users.", 
            "title": "Segments"
        }, 
        {
            "location": "/managing-segments/#example-beta-users", 
            "text": "Let's say that you want all your team to automatically be defined as  Beta Users . Right now, all your logged in users are  identified  with their email address along with some other  traits .  You create a new Segment, call it  Beta Users , and define a single rule:   email_address  contains  @bullet-train.io    Once the Segment has been defined, you can then associate that Segment with a specific Feature Flag. To do this, edit the Feature Flag that you want to connect our Segment to. You then have the option of connecting a Segment to the Feature. If the Identified user is a member of that Segment, the flag will be overridden.   For all the Feature Flags that relate to Beta features, you can associate this  Beta Users  segment with each Flag, and set the Flag value to  true  for that Segment. To do this, edit the Feature Flag and select the segment in the 'Segment Overrides' drop down.  At this point, all users who log in with an email address that contains  @bullet-train.io  will have all Beta features enabled.  Let's say that you then partner with another company who need access to all Beta features. You can then simply modify the Segment rules:   email_address  contains  @bullet-train.io  email_address  contains  @solidstategroup.com   Now all users who log in with a  @solidstategroup.com  email address are automatically included in beta features.", 
            "title": "Example - Beta Users"
        }, 
        {
            "location": "/managing-segments/#feature-flag-and-remote-config-precedence", 
            "text": "Feature Flag states and Remote Config values can be defined in 3 different places:   The default Flag/Config value itself  The Segment associated with the Flag/Config  Overridden at an Identity level   For example, a Feature Flag  Show Paypal Checkout  could be set to  false  on the Flag itself,  true  in the Beta Users segment, and then overridden as  false  for a specific Identity.   In order to deal with this situation, there is an order of priority:   If the Identity has an override value, this is returned ahead of Segments and Flags/Config  If there's no Identity override, the Segment is checked and returned if valid  If no Identity or Segment overrides the value, the default Flag/Config value is used   More simply, the order of precendence is:   Identity  Segment  Flag", 
            "title": "Feature Flag and Remote Config Precedence"
        }, 
        {
            "location": "/staged-feature-rollouts/", 
            "text": "Staged Feature Rollouts\n\n\nWhat are Staged Feature Rollouts\n\n\nStaged Feature Rollouts allow you to test a new feature with a small subset of your user base. If you are happy with the feature, you can increase the percentage of users that see the feature until it is available to your entire user base.\n\n\nThis method can increase your confidence in rolling out a new feature. If there are issues with the rollout, you can simply disable the Feature Flag, thus hiding the feature within your application.\n\n\nCreating Staged Rollouts\n\n\nYou can achieve staged rollouts by creating a \nSegment\n and adding a rule defined with the \"% Split\" condition. Specifying a \"% Split\" value between 1 and 100 then defines what percentage of your user base are included within this Segment.\n\n\nOnce you have created the Segment, you can then go ahead and connect it up to a Feature Flag as per regular \nSegments\n.\n\n\nNote that you can include the \"% Split\" rule alongside other Segment rules if you wish.\n\n\nHow does it work\n\n\nEvery Identity/Segment combination ID is hashed, and a floating point value between 0.0 and 1.0 is generated from the hash. This value is then evaluated against the \"% Split\" rule.", 
            "title": "Staged Feature Rollouts"
        }, 
        {
            "location": "/staged-feature-rollouts/#staged-feature-rollouts", 
            "text": "", 
            "title": "Staged Feature Rollouts"
        }, 
        {
            "location": "/staged-feature-rollouts/#what-are-staged-feature-rollouts", 
            "text": "Staged Feature Rollouts allow you to test a new feature with a small subset of your user base. If you are happy with the feature, you can increase the percentage of users that see the feature until it is available to your entire user base.  This method can increase your confidence in rolling out a new feature. If there are issues with the rollout, you can simply disable the Feature Flag, thus hiding the feature within your application.", 
            "title": "What are Staged Feature Rollouts"
        }, 
        {
            "location": "/staged-feature-rollouts/#creating-staged-rollouts", 
            "text": "You can achieve staged rollouts by creating a  Segment  and adding a rule defined with the \"% Split\" condition. Specifying a \"% Split\" value between 1 and 100 then defines what percentage of your user base are included within this Segment.  Once you have created the Segment, you can then go ahead and connect it up to a Feature Flag as per regular  Segments .  Note that you can include the \"% Split\" rule alongside other Segment rules if you wish.", 
            "title": "Creating Staged Rollouts"
        }, 
        {
            "location": "/staged-feature-rollouts/#how-does-it-work", 
            "text": "Every Identity/Segment combination ID is hashed, and a floating point value between 0.0 and 1.0 is generated from the hash. This value is then evaluated against the \"% Split\" rule.", 
            "title": "How does it work"
        }, 
        {
            "location": "/ab-testing/", 
            "text": "A/B Testing\n\n\nA/B testing enables you to expirement with design and functionality variants of your application. The data generated will allow you to make modifications to your app, safe in the knowledge that it will have a net postive effect.\n\n\nYou can use Bullet Train to perform A/B Testing. Using a combination of \nBullet Trains Segments\n and a 3rd party analytics tool like \nGoogle Analytics\n or \nMixpanel\n, you can generate the relevant data to perform the A/B test.\n\n\nOverview\n\n\nFor this example, lets assume we have an app that currently accepts Credit Card payments only. We have a hunch that we are losing out on potential customers that would like to pay with Paypal. We're going to test whether adding Paypal to the payment options increases our checkout rate.\n\n\nIn order to perform an A/B Test, we need to complete the following steps:\n\n\n\n\nCreate a new Feature Flag that will control whether the user sees the Paypal Button or not. We'll call this flag \"Paypal Checkout Enabled\".\n\n\nCreate a new Segment, called \"Paypal Checkout Enabled\", with 1 Rule: Include users with a % Split figure of 50.\n\n\nIn our app, we want to \nIdentify\n each user before they start the checkout process. All Bullet Train Segments need us to Identify the user, so we can uniquely identify them.\n\n\nWhen we get to the checkout page, check the state of the \"Paypal Checkout Enabled\" flag for that user. If it is enabled, show the Paypal payment button.\n\n\nSend a message to the Analytics platform, adding the name/value pair of \"Paypal Checkout Enabled\" and the value of the flag.\n\n\nDeploy your app and watch the data come in.\n\n\n\n\nExample\n\n\nWe made \na repo\n with a \nJSFiddle\n that demonstrates an A/B Test using Javascript.", 
            "title": "A/B Testing"
        }, 
        {
            "location": "/ab-testing/#ab-testing", 
            "text": "A/B testing enables you to expirement with design and functionality variants of your application. The data generated will allow you to make modifications to your app, safe in the knowledge that it will have a net postive effect.  You can use Bullet Train to perform A/B Testing. Using a combination of  Bullet Trains Segments  and a 3rd party analytics tool like  Google Analytics  or  Mixpanel , you can generate the relevant data to perform the A/B test.", 
            "title": "A/B Testing"
        }, 
        {
            "location": "/ab-testing/#overview", 
            "text": "For this example, lets assume we have an app that currently accepts Credit Card payments only. We have a hunch that we are losing out on potential customers that would like to pay with Paypal. We're going to test whether adding Paypal to the payment options increases our checkout rate.  In order to perform an A/B Test, we need to complete the following steps:   Create a new Feature Flag that will control whether the user sees the Paypal Button or not. We'll call this flag \"Paypal Checkout Enabled\".  Create a new Segment, called \"Paypal Checkout Enabled\", with 1 Rule: Include users with a % Split figure of 50.  In our app, we want to  Identify  each user before they start the checkout process. All Bullet Train Segments need us to Identify the user, so we can uniquely identify them.  When we get to the checkout page, check the state of the \"Paypal Checkout Enabled\" flag for that user. If it is enabled, show the Paypal payment button.  Send a message to the Analytics platform, adding the name/value pair of \"Paypal Checkout Enabled\" and the value of the flag.  Deploy your app and watch the data come in.", 
            "title": "Overview"
        }, 
        {
            "location": "/ab-testing/#example", 
            "text": "We made  a repo  with a  JSFiddle  that demonstrates an A/B Test using Javascript.", 
            "title": "Example"
        }, 
        {
            "location": "/system-administration/", 
            "text": "System Administration\n\n\nWeb Hooks\n\n\nYou can use the Web Hooks to send events from Bullet Train into your own infrastructure. Currently the following events will generate a Web Hook action:\n\n\n\n\nCreating Flags\n\n\nUpdating Flag state (both Flags and Remote Config)\n\n\nDeleting Flags\n\n\n\n\nYou can define any number of Web Hook endpoints per Environment. Web Hooks can be managed from the Environment settings page.\n\n\nA typical use case for Web Hooks is if you want to cache flag state locally within your server environment.\n\n\nEach event generates an HTTP POST with the following body payload to each of the Web Hooks defined within that Environment:\n\n\n{\n    \ndata\n: {\n        \nchanged_by\n: \nBen Rometsch\n,\n        \nnew_state\n: {\n            \nenabled\n: true,\n            \nenvironment\n: 4053,\n            \nfeature\n: {\n                \ncreated_date\n: \n2019-12-11T15:47:26.959385Z\n,\n                \ndefault_enabled\n: true,\n                \ndescription\n: null,\n                \nid\n: 2391,\n                \ninitial_value\n: null,\n                \nname\n: \nyour_feature_name\n,\n                \nproject\n: 1661,\n                \ntype\n: \nFLAG\n\n            },\n            \nfeature_segment\n: null,\n            \nfeature_state_value\n: null,\n            \nid\n: 7952,\n            \nidentity\n: null\n        },\n        \ntimestamp\n: \n2019-12-11T15:47:26.973Z\n\n    },\n    \nevent_type\n: \nFLAG_UPDATED\n\n}\n\n\n\n\nFull API Access\n\n\nThe client SDK libraries are designed solely for end client use, and do not have an interface to the full Bullet Train API. However, you can easily access the full API by generating a login token and sending that with your API requests. To generate a login token, send an HTTP POST to \nhttps://api.bullet-train.io/auth/login\n with the following JSON payload:\n\n\ncurl -X \nPOST\n \nhttps://api.bullet-train.io/v1/auth/login/\n \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     -d $'{\n  \nusername\n: \nadmin username\n,\n  \npassword\n: \nadmin password\n\n}'\n\n\n\n\nThis will generate a token (that does not expire) which you can then use with subsequent API calls. You can pass this token in the HTTP header with \nToken \ntoken\n\n\nPermissions and User Roles\n\n\nThere are currently 2 different role type available when managing the application.\n\n\nWe will be rolling out fine grained user permissions in a future release.\n\n\nAdmin Role\n\n\nThe Admin Role can perform all actions within the application, including the management of users who have access to the Bullet Train administrative console.\n\n\nStandard User\n\n\nThe Standard User can perform all actions within the application, but they \ncannot\n manage users within the Bullet Train administrative console.", 
            "title": "System Administration"
        }, 
        {
            "location": "/system-administration/#system-administration", 
            "text": "", 
            "title": "System Administration"
        }, 
        {
            "location": "/system-administration/#web-hooks", 
            "text": "You can use the Web Hooks to send events from Bullet Train into your own infrastructure. Currently the following events will generate a Web Hook action:   Creating Flags  Updating Flag state (both Flags and Remote Config)  Deleting Flags   You can define any number of Web Hook endpoints per Environment. Web Hooks can be managed from the Environment settings page.  A typical use case for Web Hooks is if you want to cache flag state locally within your server environment.  Each event generates an HTTP POST with the following body payload to each of the Web Hooks defined within that Environment:  {\n     data : {\n         changed_by :  Ben Rometsch ,\n         new_state : {\n             enabled : true,\n             environment : 4053,\n             feature : {\n                 created_date :  2019-12-11T15:47:26.959385Z ,\n                 default_enabled : true,\n                 description : null,\n                 id : 2391,\n                 initial_value : null,\n                 name :  your_feature_name ,\n                 project : 1661,\n                 type :  FLAG \n            },\n             feature_segment : null,\n             feature_state_value : null,\n             id : 7952,\n             identity : null\n        },\n         timestamp :  2019-12-11T15:47:26.973Z \n    },\n     event_type :  FLAG_UPDATED \n}", 
            "title": "Web Hooks"
        }, 
        {
            "location": "/system-administration/#full-api-access", 
            "text": "The client SDK libraries are designed solely for end client use, and do not have an interface to the full Bullet Train API. However, you can easily access the full API by generating a login token and sending that with your API requests. To generate a login token, send an HTTP POST to  https://api.bullet-train.io/auth/login  with the following JSON payload:  curl -X  POST   https://api.bullet-train.io/v1/auth/login/  \\\n     -H 'Content-Type: application/json; charset=utf-8' \\\n     -d $'{\n   username :  admin username ,\n   password :  admin password \n}'  This will generate a token (that does not expire) which you can then use with subsequent API calls. You can pass this token in the HTTP header with  Token  token", 
            "title": "Full API Access"
        }, 
        {
            "location": "/system-administration/#permissions-and-user-roles", 
            "text": "There are currently 2 different role type available when managing the application.  We will be rolling out fine grained user permissions in a future release.", 
            "title": "Permissions and User Roles"
        }, 
        {
            "location": "/system-administration/#admin-role", 
            "text": "The Admin Role can perform all actions within the application, including the management of users who have access to the Bullet Train administrative console.", 
            "title": "Admin Role"
        }, 
        {
            "location": "/system-administration/#standard-user", 
            "text": "The Standard User can perform all actions within the application, but they  cannot  manage users within the Bullet Train administrative console.", 
            "title": "Standard User"
        }, 
        {
            "location": "/audit-logs/", 
            "text": "Audit Logs\n\n\nEvery action taken within the Bullet Train adminstration application is tracked and logged.\nThis allows you to easily retrace the events and values that flags, identities and segments have taken over time.\n\n\nYou can view the Audit Log within the Bullet Train application, and filter it in order to find the information you are after.", 
            "title": "Audit Logs"
        }, 
        {
            "location": "/audit-logs/#audit-logs", 
            "text": "Every action taken within the Bullet Train adminstration application is tracked and logged.\nThis allows you to easily retrace the events and values that flags, identities and segments have taken over time.  You can view the Audit Log within the Bullet Train application, and filter it in order to find the information you are after.", 
            "title": "Audit Logs"
        }, 
        {
            "location": "/clients/javascript/", 
            "text": "This library can be used with pure Javascript, React (and all other popular frameworks/libraries) and React Native projects. The source code for the client is available on \nGithub\n.\n\n\nExample applications for Web and React Native can be found here:\n\n\n\n\nWeb example\n\n\nReact Native example\n\n\n\n\nExamples applications for many popular JS frameworks such as React, Vue and Angular can be found here:\n\n\n\n\nJS framework examples\n\n\n\n\nInstallation\n\n\nNPM\n\n\nnpm i bullet-train-client --save\n\n\n\n\nVia JavaScript CDN\n\n\nscript src=\nhttps://cdn.jsdelivr.net/npm/bullet-train-client/lib/index.js\n/script\n\n\n\n\n\nNPM for React Native\n\n\nnpm i react-native-bullet-train --save\n\n\n\n\nBasic Usage\n\n\nThe SDK is initialised against a single environment within a project on \nhttps://bullet-train.io\n,\nfor example the Development or Production environment. You can find your environment key in the Environment settings page.\n\n\n\n\nExample: Initialising the SDK\n\n\nimport bulletTrain from \nbullet-train-client or react-native-bullet-train\n; //Add this line if you're using bulletTrain via npm\n\nbulletTrain.init({\n    environmentID:\nYOUR_ENVIRONMENT_KEY\n,\n    onChange: (oldFlags,params)=\n{ //Occurs whenever flags are changed\n\n        const {isFromServer} = params; //determines if the update came from the server or local cached storage\n\n        //Check for a feature\n        if (bulletTrain.hasFeature(\nmyCoolFeature\n)){\n            myCoolFeature();\n        }\n\n\n        //Or, use the value of a feature\n        const bannerSize = bulletTrain.getValue(\nbannerSize\n);\n\n        //Check whether value has changed\n        const bannerSizeOld = oldFlags[\nbannerSize\n] \n oldFlags[\nbannerSize\n].value;\n        if (bannerSize !== bannerSizeOld) {\n\n        }\n\n    }\n});\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the Bullet Train dashboard and configure features and traits. You can call this before or after you initialise the project, calling it after will re-fetch features from the API.\n\n\nUser features can be managed by navigating to users on \nhttps://bullet-train.io\n for your desired project.\n \n\n\nExample: Initialising the SDK and identifying as a user\n\n\nimport bulletTrain from 'bullet-train-client';\n\n/*\nCan be called both before or after you're done initialising the project.\nCalling identify before will prevent flags being fetched twice.\n*/\nbulletTrain.identify(\nbullet_train_sample_user\n}); //This will create a user in the dashboard if they don't already exist\nbulletTrain.setTrait(\nfavourite_colour\n,\nblue\n); //This save the trait against the user, it can be queried with bulletTrain.getTrait \n\n//Standard project initialisation\nbulletTrain.init({\n    environmentID: \nQjgYur4LQTwe5HpvbvhpzK\n,\n        onChange: (oldFlags,params)=\n{ //Occurs whenever flags are changed\n\n        const {isFromServer} = params; //determines if the update came from the server or local cached storage\n\n        //Check for a feature\n        if (bulletTrain.hasFeature(\nmyPowerUserFeature\n)){\n            myPowerUserFeature();\n        }\n\n        //Check for a trait\n        if (!bulletTrain.getTrait(\naccepted_cookie_policy\n)){\n            showCookiePolicy();\n        }\n\n        //Or, use the value of a feature\n        const myPowerUserFeature = bulletTrain.getValue(\nmyPowerUserFeature\n);\n\n        //Check whether value has changed\n        const myPowerUserFeatureOld = oldFlags[\nmyPowerUserFeature\n] \n oldFlags[\nmyPowerUserFeature\n].value;\n        if (myPowerUserFeature !== myPowerUserFeatureOld) {\n\n        }\n\n    }\n})\n\n\n\n\nAPI Reference\n\n\nInitialisation options\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nenvironmentID\n\n\nDefines which project environment you wish to get flags for. \nexample ACME Project - Staging.\n\n\nYES\n\n\nnull\n\n\n\n\n\n\nonChange\n\n\nYour callback function for when the flags are retrieved \n(flags,{isFromServer:true/false})=\n{...}\n\n\nYES\n\n\nnull\n\n\n\n\n\n\nonError\n\n\nCallback function on failure to retrieve flags. \n(error)=\n{...}\n\n\n\n\nnull\n\n\n\n\n\n\ndefaultFlags\n\n\nAllows you define default features, these will all be overridden on first retrieval of features.\n\n\n\n\nnull\n\n\n\n\n\n\ndisableCache\n\n\nIf you want to disable local storage of feature flags.\n\n\n\n\nfalse\n\n\n\n\n\n\napi\n\n\nUse this property to define where you're getting feature flags from, e.g. if you're self hosting.\n\n\n\n\nhttps://featureflagger.3qqe.flynnhub.com/api/\n\n\n\n\n\n\n\n\nAvailable Functions\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninit\n\n\nInitialise the sdk against a particular environment\n\n\n\n\n\n\nhasFeature(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.hasFeature(\"powerUserFeature\") // true\n\n\n\n\n\n\ngetValue(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.getValue(\"font_size\") // 10\n\n\n\n\n\n\ngetTrait(key)\n\n\nOnce used with an identified user you can get the value of any trait that is set for them e.g. \nbulletTrain.getTrait(\"accepted_cookie_policy\")\n\n\n\n\n\n\nsetTrait(key, value)\n\n\nOnce used with an identified user you can set the value of any trait relevant to them e.g. \nbulletTrain.setTrait(\"accepted_cookie_policy\", true)\n\n\n\n\n\n\nincrementTrait(key, value)\n\n\nYou can also increment/decrement a particular trait them e.g. \nbulletTrain.incrementTrait(\"click_count\", 1)\n\n\n\n\n\n\nstartListening(ticks=1000)\n\n\nPoll the api for changes every x milliseconds\n\n\n\n\n\n\nstopListening()\n\n\nStop polling the api\n\n\n\n\n\n\ngetFlags()\n\n\nTrigger a manual fetch of the environment features, if a user is identified it will fetch their features\n\n\n\n\n\n\nidentify(userId)\n\n\nIdentify as a user, this will create a user for your environment in the dashboard if they don't exist, it will also trigger a call to \ngetFlags()\n\n\n\n\n\n\nlogout()\n\n\nStop identifying as a user, this will trigger a call to \ngetFlags()", 
            "title": "Javascript/React Native"
        }, 
        {
            "location": "/clients/javascript/#installation", 
            "text": "NPM  npm i bullet-train-client --save  Via JavaScript CDN  script src= https://cdn.jsdelivr.net/npm/bullet-train-client/lib/index.js /script   NPM for React Native  npm i react-native-bullet-train --save", 
            "title": "Installation"
        }, 
        {
            "location": "/clients/javascript/#basic-usage", 
            "text": "The SDK is initialised against a single environment within a project on  https://bullet-train.io ,\nfor example the Development or Production environment. You can find your environment key in the Environment settings page.   Example: Initialising the SDK  import bulletTrain from  bullet-train-client or react-native-bullet-train ; //Add this line if you're using bulletTrain via npm\n\nbulletTrain.init({\n    environmentID: YOUR_ENVIRONMENT_KEY ,\n    onChange: (oldFlags,params)= { //Occurs whenever flags are changed\n\n        const {isFromServer} = params; //determines if the update came from the server or local cached storage\n\n        //Check for a feature\n        if (bulletTrain.hasFeature( myCoolFeature )){\n            myCoolFeature();\n        }\n\n\n        //Or, use the value of a feature\n        const bannerSize = bulletTrain.getValue( bannerSize );\n\n        //Check whether value has changed\n        const bannerSizeOld = oldFlags[ bannerSize ]   oldFlags[ bannerSize ].value;\n        if (bannerSize !== bannerSizeOld) {\n\n        }\n\n    }\n});", 
            "title": "Basic Usage"
        }, 
        {
            "location": "/clients/javascript/#identifying-users", 
            "text": "Identifying users allows you to target specific users from the Bullet Train dashboard and configure features and traits. You can call this before or after you initialise the project, calling it after will re-fetch features from the API.  User features can be managed by navigating to users on  https://bullet-train.io  for your desired project.\n   Example: Initialising the SDK and identifying as a user  import bulletTrain from 'bullet-train-client';\n\n/*\nCan be called both before or after you're done initialising the project.\nCalling identify before will prevent flags being fetched twice.\n*/\nbulletTrain.identify( bullet_train_sample_user }); //This will create a user in the dashboard if they don't already exist\nbulletTrain.setTrait( favourite_colour , blue ); //This save the trait against the user, it can be queried with bulletTrain.getTrait \n\n//Standard project initialisation\nbulletTrain.init({\n    environmentID:  QjgYur4LQTwe5HpvbvhpzK ,\n        onChange: (oldFlags,params)= { //Occurs whenever flags are changed\n\n        const {isFromServer} = params; //determines if the update came from the server or local cached storage\n\n        //Check for a feature\n        if (bulletTrain.hasFeature( myPowerUserFeature )){\n            myPowerUserFeature();\n        }\n\n        //Check for a trait\n        if (!bulletTrain.getTrait( accepted_cookie_policy )){\n            showCookiePolicy();\n        }\n\n        //Or, use the value of a feature\n        const myPowerUserFeature = bulletTrain.getValue( myPowerUserFeature );\n\n        //Check whether value has changed\n        const myPowerUserFeatureOld = oldFlags[ myPowerUserFeature ]   oldFlags[ myPowerUserFeature ].value;\n        if (myPowerUserFeature !== myPowerUserFeatureOld) {\n\n        }\n\n    }\n})", 
            "title": "Identifying users"
        }, 
        {
            "location": "/clients/javascript/#api-reference", 
            "text": "Initialisation options     Property  Description  Required  Default Value      environmentID  Defines which project environment you wish to get flags for.  example ACME Project - Staging.  YES  null    onChange  Your callback function for when the flags are retrieved  (flags,{isFromServer:true/false})= {...}  YES  null    onError  Callback function on failure to retrieve flags.  (error)= {...}   null    defaultFlags  Allows you define default features, these will all be overridden on first retrieval of features.   null    disableCache  If you want to disable local storage of feature flags.   false    api  Use this property to define where you're getting feature flags from, e.g. if you're self hosting.   https://featureflagger.3qqe.flynnhub.com/api/     Available Functions     Property  Description      init  Initialise the sdk against a particular environment    hasFeature(key)  Get the value of a particular feature e.g.  bulletTrain.hasFeature(\"powerUserFeature\") // true    getValue(key)  Get the value of a particular feature e.g.  bulletTrain.getValue(\"font_size\") // 10    getTrait(key)  Once used with an identified user you can get the value of any trait that is set for them e.g.  bulletTrain.getTrait(\"accepted_cookie_policy\")    setTrait(key, value)  Once used with an identified user you can set the value of any trait relevant to them e.g.  bulletTrain.setTrait(\"accepted_cookie_policy\", true)    incrementTrait(key, value)  You can also increment/decrement a particular trait them e.g.  bulletTrain.incrementTrait(\"click_count\", 1)    startListening(ticks=1000)  Poll the api for changes every x milliseconds    stopListening()  Stop polling the api    getFlags()  Trigger a manual fetch of the environment features, if a user is identified it will fetch their features    identify(userId)  Identify as a user, this will create a user for your environment in the dashboard if they don't exist, it will also trigger a call to  getFlags()    logout()  Stop identifying as a user, this will trigger a call to  getFlags()", 
            "title": "API Reference"
        }, 
        {
            "location": "/clients/node/", 
            "text": "This library can be used with server-side NodeJS projects. The source code for the client is available on \nGithub\n.\n\n\nGetting Started\n\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.\n\n\nInstalling\n\n\nVIA npm\n\n\nnpm i bullet-train-nodejs --save\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://docs.bullet-train.io\n\n\nvar bulletTrain = require(\nbullet-train-nodejs\n);\n\nbulletTrain.init({\n    environmentID: \nYOUR_ENVIRONMENT_KEY\n\n});\n\nbulletTrain.hasFeature(\nheader\n, '\nMy User Id\n')\n    .then((featureEnabled) =\n {\n        if (featureEnabled) {\n            //Show my awesome cool new feature to this one user\n        }\n    });\nbulletTrain.hasFeature(\nheader\n)\n    .then((featureEnabled) =\n {\n        if (featureEnabled) {\n            //Show my awesome cool new feature to the world\n        }\n    });\n\nbulletTrain.getValue(\nheader\n, '\nMy User Id')\n    .then((value) =\n {\n        //Show some unique value to this user\n    });\n\nbulletTrain.getValue(\nheader\n)\n    .then((value) =\n {\n        //Show a value to the world\n    });\n\n\n\n\nAvailable Options\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nenvironmentID\n\n\nDefines which project environment you wish to get flags for. \nexample ACME Project - Staging.\n\n\nYES\n\n\nnull\n\n\n\n\n\n\nonError\n\n\nCallback function on failure to retrieve flags. \n(error)=\n{...}\n\n\nNO\n\n\nnull\n\n\n\n\n\n\ndefaultFlags\n\n\nDefines the default flags if there are any\n\n\nNO\n\n\nnull\n\n\n\n\n\n\napi\n\n\nUse this property to define where you're getting feature flags from, e.g. if you're self hosting.\n\n\nNO\n\n\nhttps://bullet-train-api.dokku1.solidstategroup.com/api/v1/\n\n\n\n\n\n\n\n\nAvailable Functions\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninit\n\n\nInitialise the sdk against a particular environment\n\n\n\n\n\n\nhasFeature(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.hasFeature(\"powerUserFeature\") // true\n\n\n\n\n\n\nhasFeature(key, userId)\n\n\nGet the value of a particular feature for a user e.g. \nbulletTrain.hasFeature(\"powerUserFeature\", 1234) // true\n\n\n\n\n\n\ngetValue(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.getValue(\"font_size\") // 10\n\n\n\n\n\n\ngetValue(key, userId)\n\n\nGet the value of a particular feature for a specificed user e.g. \nbulletTrain.getValue(\"font_size\", 1234) // 15\n\n\n\n\n\n\ngetFlags()\n\n\nTrigger a manual fetch of the environment features\n\n\n\n\n\n\ngetFlagsForUser(userId)\n\n\nTrigger a manual fetch of the environment features for a given user id\n\n\n\n\n\n\ngetUserIdentity(userId)\n\n\nTrigger a manual fetch of both the environment features and users' traits for a given user id\n\n\n\n\n\n\ngetTrait(userId, key)\n\n\nTrigger a manual fetch of a specific trait for a given user id\n\n\n\n\n\n\nsetTrait(userId, key, value)\n\n\nSet a specific trait for a given user id\n\n\n\n\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\nYou can include an optional user identifier as part of the \nhasFeature\n and \ngetValue\n methods to retrieve unique user flags and variables.\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.\n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": "Node"
        }, 
        {
            "location": "/clients/node/#getting-started", 
            "text": "These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/node/#installing", 
            "text": "", 
            "title": "Installing"
        }, 
        {
            "location": "/clients/node/#via-npm", 
            "text": "npm i bullet-train-nodejs --save", 
            "title": "VIA npm"
        }, 
        {
            "location": "/clients/node/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://docs.bullet-train.io  var bulletTrain = require( bullet-train-nodejs );\n\nbulletTrain.init({\n    environmentID:  YOUR_ENVIRONMENT_KEY \n});\n\nbulletTrain.hasFeature( header , ' My User Id ')\n    .then((featureEnabled) =  {\n        if (featureEnabled) {\n            //Show my awesome cool new feature to this one user\n        }\n    });\nbulletTrain.hasFeature( header )\n    .then((featureEnabled) =  {\n        if (featureEnabled) {\n            //Show my awesome cool new feature to the world\n        }\n    });\n\nbulletTrain.getValue( header , ' My User Id')\n    .then((value) =  {\n        //Show some unique value to this user\n    });\n\nbulletTrain.getValue( header )\n    .then((value) =  {\n        //Show a value to the world\n    });  Available Options     Property  Description  Required  Default Value      environmentID  Defines which project environment you wish to get flags for.  example ACME Project - Staging.  YES  null    onError  Callback function on failure to retrieve flags.  (error)= {...}  NO  null    defaultFlags  Defines the default flags if there are any  NO  null    api  Use this property to define where you're getting feature flags from, e.g. if you're self hosting.  NO  https://bullet-train-api.dokku1.solidstategroup.com/api/v1/     Available Functions     Property  Description      init  Initialise the sdk against a particular environment    hasFeature(key)  Get the value of a particular feature e.g.  bulletTrain.hasFeature(\"powerUserFeature\") // true    hasFeature(key, userId)  Get the value of a particular feature for a user e.g.  bulletTrain.hasFeature(\"powerUserFeature\", 1234) // true    getValue(key)  Get the value of a particular feature e.g.  bulletTrain.getValue(\"font_size\") // 10    getValue(key, userId)  Get the value of a particular feature for a specificed user e.g.  bulletTrain.getValue(\"font_size\", 1234) // 15    getFlags()  Trigger a manual fetch of the environment features    getFlagsForUser(userId)  Trigger a manual fetch of the environment features for a given user id    getUserIdentity(userId)  Trigger a manual fetch of both the environment features and users' traits for a given user id    getTrait(userId, key)  Trigger a manual fetch of a specific trait for a given user id    setTrait(userId, key, value)  Set a specific trait for a given user id     Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .\nYou can include an optional user identifier as part of the  hasFeature  and  getValue  methods to retrieve unique user flags and variables.", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/node/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/node/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/node/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }, 
        {
            "location": "/clients/android/", 
            "text": "Android Client\n\n\nYou can use the \nJava Client\n to run Bullet Train within native Android applications.", 
            "title": "Android"
        }, 
        {
            "location": "/clients/android/#android-client", 
            "text": "You can use the  Java Client  to run Bullet Train within native Android applications.", 
            "title": "Android Client"
        }, 
        {
            "location": "/clients/ios/", 
            "text": "iOS Client\n\n\nThis library can be used with iOS and Mac applications. The source code for the client is available on \nGithub\n.\n\n\nUsage\n\n\nBulletTrain.shared.apiKey = \nadd your API key from the Bullet Train settings page\n\nBulletTrain.shared.getFeatureFlags() { (result) in\n    print(result)\n}\nBulletTrain.shared.hasFeatureFlag(withID: \nfreeze_delinquent_accounts\n) { (result) in\n    print(result)\n}", 
            "title": "iOS"
        }, 
        {
            "location": "/clients/ios/#ios-client", 
            "text": "This library can be used with iOS and Mac applications. The source code for the client is available on  Github .", 
            "title": "iOS Client"
        }, 
        {
            "location": "/clients/ios/#usage", 
            "text": "BulletTrain.shared.apiKey =  add your API key from the Bullet Train settings page \nBulletTrain.shared.getFeatureFlags() { (result) in\n    print(result)\n}\nBulletTrain.shared.hasFeatureFlag(withID:  freeze_delinquent_accounts ) { (result) in\n    print(result)\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/java/", 
            "text": "Java Client\n\n\nThis library can be used with server-side Java and Android applications. The source code for the client is available on \nGithub\n.\n\n\nGetting Started\n\n\nQuick Setup\n\n\nThe client library is available from the Central Maven Repository and can be added to your project by many tools:\n\n\nMaven\n\n\nAdd following dependencies to your project in \npom.xml\n\n\ndependency\n\n  \ngroupId\ncom.solidstategroup\n/groupId\n\n  \nartifactId\nbullet-train-client\n/artifactId\n\n  \nversion\n1.3\n/version\n\n\n/dependency\n\n\n\n\n\nGradle\n\n\nimplementation 'com.solidstategroup:bullet-train-client:1.3'\n\n\n\n\nUsage\n\n\nSign Up and create account at \nhttps://bullet-train.io/\n\n\nIn your application initialise BulletTrain client with your API key\n\n\nBulletTrainClient bulletClient = BulletTrainClient.newBuilder()\n                .setApiKey(\nYOUR_ENV_API_KEY\n)\n                .build();\n\n\n\n\nTo check if feature flag exist and enabled:\n\n\nboolean featureEnabled = bulletClient.hasFeatureFlag(\nmy_test_feature\n);\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}\n\n\n\n\nTo get configuration value for feature flag:\n\n\nString myRemoteConfig = bulletClient.getFeatureFlagValue(\nmy_test_feature\n);\nif (myRemoteConfig != null) {    \n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\n\n\nTo check if feature exist for given user context:\n\n\nUser user = new User();\nuser.setIdentifier(\nbullet_train_sample_user\n);\n\nboolean featureEnabled = bulletClient.hasFeatureFlag(\nmy_test_feature\n, user);\nif (featureEnabled) {\n    String myRemoteConfig = bulletClient.getFeatureFlagValue(\nmy_test_feature\n, user);\n    // run the code for to execute enabled feature for given user\n} else {\n    // run the code if feature switched off\n}\n\n\n\n\nTo get configuration value for feature flag for given user context:\n\n\nString myRemoteConfig = bulletClient.getFeatureFlagValue(\nmy_test_feature\n, user);\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n\n\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Java"
        }, 
        {
            "location": "/clients/java/#java-client", 
            "text": "This library can be used with server-side Java and Android applications. The source code for the client is available on  Github .", 
            "title": "Java Client"
        }, 
        {
            "location": "/clients/java/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/java/#quick-setup", 
            "text": "The client library is available from the Central Maven Repository and can be added to your project by many tools:", 
            "title": "Quick Setup"
        }, 
        {
            "location": "/clients/java/#maven", 
            "text": "Add following dependencies to your project in  pom.xml  dependency \n   groupId com.solidstategroup /groupId \n   artifactId bullet-train-client /artifactId \n   version 1.3 /version  /dependency", 
            "title": "Maven"
        }, 
        {
            "location": "/clients/java/#gradle", 
            "text": "implementation 'com.solidstategroup:bullet-train-client:1.3'", 
            "title": "Gradle"
        }, 
        {
            "location": "/clients/java/#usage", 
            "text": "Sign Up and create account at  https://bullet-train.io/  In your application initialise BulletTrain client with your API key  BulletTrainClient bulletClient = BulletTrainClient.newBuilder()\n                .setApiKey( YOUR_ENV_API_KEY )\n                .build();  To check if feature flag exist and enabled:  boolean featureEnabled = bulletClient.hasFeatureFlag( my_test_feature );\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}  To get configuration value for feature flag:  String myRemoteConfig = bulletClient.getFeatureFlagValue( my_test_feature );\nif (myRemoteConfig != null) {    \n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/java/#identifying-users", 
            "text": "Identifying users allows you to target specific users from the  Bullet Train dashboard .  To check if feature exist for given user context:  User user = new User();\nuser.setIdentifier( bullet_train_sample_user );\n\nboolean featureEnabled = bulletClient.hasFeatureFlag( my_test_feature , user);\nif (featureEnabled) {\n    String myRemoteConfig = bulletClient.getFeatureFlagValue( my_test_feature , user);\n    // run the code for to execute enabled feature for given user\n} else {\n    // run the code if feature switched off\n}  To get configuration value for feature flag for given user context:  String myRemoteConfig = bulletClient.getFeatureFlagValue( my_test_feature , user);\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}", 
            "title": "Identifying users"
        }, 
        {
            "location": "/clients/java/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/java/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/python/", 
            "text": "This library can be used with server-side Python projects. The source code for the client is available on \nGithub\n.\n\n\nGetting Started\n\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.\n\n\nInstalling\n\n\nVIA pip\n\n\npip install bullet-train\n\n\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://docs.bullet-train.io\n\n\nfrom bullet_train import BulletTrain;\n\nbt = BulletTrain(environment_id=\nYOUR_ENVIRONMENT_KEY\n)\n\nif bt.has_feature(\nheader\n, '\nMy User Id\n'):\n  if bt.feature_enabled(\nheader\n):\n    # Show my awesome cool new feature to the world\n\nif bt.has_feature(\nheader\n):\n  if bt.feature_enabled(\nheader\n):\n    # Show my awesome cool new feature to the world\n\nvalue = bt.get_value(\nheader\n, '\nMy User Id\n')\n\nvalue = bt.get_value(\nheader\n)\n\n\n\n\nAvailable Options\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nenvironment_id\n\n\nDefines which project environment you wish to get flags for. \nexample ACME Project - Staging.\n\n\nYES\n\n\nNone\n\n\n\n\n\n\napi\n\n\nUse this property to define where you're getting feature flags from, e.g. if you're self hosting.\n\n\nNO\n\n\nhttps://api.bullet-train.io/api/\n\n\n\n\n\n\n\n\nAvailable Functions\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhas_feature(key)\n\n\nGet the value of a particular feature e.g. \nbt.has_feature(\"powerUserFeature\") // true\n\n\n\n\n\n\nhas_feature(key, user_id)\n\n\nGet the value of a particular feature for a user e.g. \nbt.has_feature(\"powerUserFeature\", 1234) // true\n\n\n\n\n\n\nget_value(key)\n\n\nGet the value of a particular feature e.g. \nbt.get_value(\"font_size\") // 10\n\n\n\n\n\n\nget_value(key, userId)\n\n\nGet the value of a particular feature for a specified user e.g. \nbt.get_value(\"font_size\", 1234) // 15\n\n\n\n\n\n\nget_flags()\n\n\nTrigger a manual fetch of the environment features, returns a list of flag objects, see below for returned data\n\n\n\n\n\n\nget_flags_for_user(1234)\n\n\nTrigger a manual fetch of the environment features with a given user id, returns a list of flag objects, see below for returned data\n\n\n\n\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\nYou can include an optional user identifier as part of the \nhas_feature\n and \nget_value\n methods to retrieve unique user flags and variables.\n\n\nFlags data structure\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nid\n\n\nInternal id of feature state\n\n\nInteger\n\n\n\n\n\n\nenabled\n\n\nWhether feature is enabled or not\n\n\nBoolean\n\n\n\n\n\n\nenvironment\n\n\nInternal ID of environment\n\n\nInteger\n\n\n\n\n\n\nfeature_state_value\n\n\nValue of the feature\n\n\nAny - determined based on data input on \nbullet-train.io\n.\n\n\n\n\n\n\nfeature\n\n\nFeature object - see below for details\n\n\nObject\n\n\n\n\n\n\n\n\nFeature data structure\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nType\n\n\n\n\n\n\n\n\n\n\nid\n\n\nInternal id of feature\n\n\nInteger\n\n\n\n\n\n\nname\n\n\nName of the feature (sometimes referred to as key or ID)\n\n\nString\n\n\n\n\n\n\ndescription\n\n\nDescription of the feature\n\n\nString\n\n\n\n\n\n\ntype\n\n\nFeature Type. Can be FLAG or CONFIG\n\n\nString\n\n\n\n\n\n\ncreated_date\n\n\nDate feature was created\n\n\nDatetime\n\n\n\n\n\n\ninital_value\n\n\nThe initial / default value set for all feature states on creation\n\n\nString\n\n\n\n\n\n\nproject\n\n\nInternal ID of the associated project\n\n\nInteger\n\n\n\n\n\n\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. \n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": "Python"
        }, 
        {
            "location": "/clients/python/#getting-started", 
            "text": "These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/python/#installing", 
            "text": "", 
            "title": "Installing"
        }, 
        {
            "location": "/clients/python/#via-pip", 
            "text": "pip install bullet-train", 
            "title": "VIA pip"
        }, 
        {
            "location": "/clients/python/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://docs.bullet-train.io  from bullet_train import BulletTrain;\n\nbt = BulletTrain(environment_id= YOUR_ENVIRONMENT_KEY )\n\nif bt.has_feature( header , ' My User Id '):\n  if bt.feature_enabled( header ):\n    # Show my awesome cool new feature to the world\n\nif bt.has_feature( header ):\n  if bt.feature_enabled( header ):\n    # Show my awesome cool new feature to the world\n\nvalue = bt.get_value( header , ' My User Id ')\n\nvalue = bt.get_value( header )  Available Options     Property  Description  Required  Default Value      environment_id  Defines which project environment you wish to get flags for.  example ACME Project - Staging.  YES  None    api  Use this property to define where you're getting feature flags from, e.g. if you're self hosting.  NO  https://api.bullet-train.io/api/     Available Functions     Function  Description      has_feature(key)  Get the value of a particular feature e.g.  bt.has_feature(\"powerUserFeature\") // true    has_feature(key, user_id)  Get the value of a particular feature for a user e.g.  bt.has_feature(\"powerUserFeature\", 1234) // true    get_value(key)  Get the value of a particular feature e.g.  bt.get_value(\"font_size\") // 10    get_value(key, userId)  Get the value of a particular feature for a specified user e.g.  bt.get_value(\"font_size\", 1234) // 15    get_flags()  Trigger a manual fetch of the environment features, returns a list of flag objects, see below for returned data    get_flags_for_user(1234)  Trigger a manual fetch of the environment features with a given user id, returns a list of flag objects, see below for returned data     Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .\nYou can include an optional user identifier as part of the  has_feature  and  get_value  methods to retrieve unique user flags and variables.  Flags data structure     Field  Description  Type      id  Internal id of feature state  Integer    enabled  Whether feature is enabled or not  Boolean    environment  Internal ID of environment  Integer    feature_state_value  Value of the feature  Any - determined based on data input on  bullet-train.io .    feature  Feature object - see below for details  Object     Feature data structure     Field  Description  Type      id  Internal id of feature  Integer    name  Name of the feature (sometimes referred to as key or ID)  String    description  Description of the feature  String    type  Feature Type. Can be FLAG or CONFIG  String    created_date  Date feature was created  Datetime    inital_value  The initial / default value set for all feature states on creation  String    project  Internal ID of the associated project  Integer", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/python/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/python/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/python/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }, 
        {
            "location": "/clients/ruby/", 
            "text": "Bullet Train Client\n\n\nThe SDK clients for Ruby \nhttps://bullet-train.io/\n. Bullet Train allows you to manage feature flags and remote config across multiple projects, environments and organisations.\n\n\nGetting Started\n\n\nThese instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.\n\n\nInstalling\n\n\nVIA gem\n\n\ngem install bullet-train-client\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://docs.bullet-train.io\n\n\nrequire \nbullet-train-ruby-client\n\n\nbt = BulletTrain.new(\nYour API KEY\n)\n\nif bt.getValue(\nfont_size\n)\n  #    Do something awesome with the font size\nend\n\nif bt.hasFeature(\ndoes_not_exist\n)\n  #do something\nelse\n  #do nothing, or something else\nend\n\n\n\n\n\nAvailable Options\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nRequired\n\n\nDefault Value\n\n\n\n\n\n\n\n\n\n\nenvironmentID\n\n\nDefines which project environment you wish to get flags for. \nexample ACME Project - Staging.\n\n\nYES\n\n\nnull\n\n\n\n\n\n\nonError\n\n\nCallback function on failure to retrieve flags. \n(error)=\n{...}\n\n\nNO\n\n\nnull\n\n\n\n\n\n\ndefaultFlags\n\n\nDefines the default flags if there are any\n\n\nNO\n\n\nnull\n\n\n\n\n\n\napi\n\n\nUse this property to define where you're getting feature flags from, e.g. if you're self hosting.\n\n\nNO\n\n\nhttps://bullet-train-api.dokku1.solidstategroup.com/api/v1/\n\n\n\n\n\n\n\n\nAvailable Functions\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninit\n\n\nInitialise the sdk against a particular environment\n\n\n\n\n\n\nhasFeature(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.hasFeature(\"powerUserFeature\") // true\n\n\n\n\n\n\nhasFeature(key, userId)\n\n\nGet the value of a particular feature for a user e.g. \nbulletTrain.hasFeature(\"powerUserFeature\", 1234) // true\n\n\n\n\n\n\ngetValue(key)\n\n\nGet the value of a particular feature e.g. \nbulletTrain.getValue(\"font_size\") // 10\n\n\n\n\n\n\ngetValue(keym userId)\n\n\nGet the value of a particular feature for a specificed user e.g. \nbulletTrain.getValue(\"font_size\", 1234) // 15\n\n\n\n\n\n\ngetFlags()\n\n\nTrigger a manual fetch of the environment features, if a user is identified it will fetch their features\n\n\n\n\n\n\ngetFlagsForUser(1234)\n\n\nTrigger a manual fetch of the environment features with a given user id\n\n\n\n\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\nYou can include an optional user identifier as part of the \nhasFeature\n and \ngetValue\n methods to retrieve unique user flags and variables.\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates. \n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": "Ruby"
        }, 
        {
            "location": "/clients/ruby/#bullet-train-client", 
            "text": "The SDK clients for Ruby  https://bullet-train.io/ . Bullet Train allows you to manage feature flags and remote config across multiple projects, environments and organisations.", 
            "title": "Bullet Train Client"
        }, 
        {
            "location": "/clients/ruby/#getting-started", 
            "text": "These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See running in production for notes on how to deploy the project on a live system.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/ruby/#installing", 
            "text": "", 
            "title": "Installing"
        }, 
        {
            "location": "/clients/ruby/#via-gem", 
            "text": "gem install bullet-train-client", 
            "title": "VIA gem"
        }, 
        {
            "location": "/clients/ruby/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://docs.bullet-train.io  require  bullet-train-ruby-client \n\nbt = BulletTrain.new( Your API KEY )\n\nif bt.getValue( font_size )\n  #    Do something awesome with the font size\nend\n\nif bt.hasFeature( does_not_exist )\n  #do something\nelse\n  #do nothing, or something else\nend  Available Options     Property  Description  Required  Default Value      environmentID  Defines which project environment you wish to get flags for.  example ACME Project - Staging.  YES  null    onError  Callback function on failure to retrieve flags.  (error)= {...}  NO  null    defaultFlags  Defines the default flags if there are any  NO  null    api  Use this property to define where you're getting feature flags from, e.g. if you're self hosting.  NO  https://bullet-train-api.dokku1.solidstategroup.com/api/v1/     Available Functions     Property  Description      init  Initialise the sdk against a particular environment    hasFeature(key)  Get the value of a particular feature e.g.  bulletTrain.hasFeature(\"powerUserFeature\") // true    hasFeature(key, userId)  Get the value of a particular feature for a user e.g.  bulletTrain.hasFeature(\"powerUserFeature\", 1234) // true    getValue(key)  Get the value of a particular feature e.g.  bulletTrain.getValue(\"font_size\") // 10    getValue(keym userId)  Get the value of a particular feature for a specificed user e.g.  bulletTrain.getValue(\"font_size\", 1234) // 15    getFlags()  Trigger a manual fetch of the environment features, if a user is identified it will fetch their features    getFlagsForUser(1234)  Trigger a manual fetch of the environment features with a given user id     Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .\nYou can include an optional user identifier as part of the  hasFeature  and  getValue  methods to retrieve unique user flags and variables.", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/ruby/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/ruby/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/ruby/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }, 
        {
            "location": "/clients/dotnet/", 
            "text": "This SDK can be used for .NET Core, .NET Framework, Mono, Xamarin and Universal Windows Platform applications. The source code for the client is available on \nGithub\n.\n\n\nGetting Started\n\n\nQuick Setup\n\n\nThe client library is available from NuGet and can be added to your project by many tools. You can find the package here \nhttps://www.nuget.org/packages/BulletTrain/\n\n\nUsage\n\n\nRetrieving feature flags for your project\n\n\nFor full documentation visit \nhttps://docs.bullet-train.io\n\n\nSign Up and create account at \nhttps://bullet-train.io/\n\n\nIn your application initialise the Bullet Train client with your environment API key\n\n\nBulletTrainClient bulletClient = new BulletTrainClient() {\n  environmentKey: \nenvironment-key-here\n\n};\n\n\n\n\nTo check if a feature flag exists and is enabled:\n\n\nbool featureEnabled = await bulletClient.HasFeatureFlag(\nmy_test_feature\n);\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}\n\n\n\n\nTo get a remote config feature value:\n\n\nstring myRemoteConfig = await bulletClient.GetFeatureValue(\nmy_test_feature\n);\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n\n\n\n\nIdentifying users\n\n\nIdentifying users allows you to target specific users from the \nBullet Train dashboard\n.\n\n\nTo check if a feature exists and is enabled for a specific user:\n\n\nbool featureEnabled = await bulletClient.HasFeatureFlag(\nmy_test_feature\n, \nmy_user_id\n);\nif (featureEnabled) {\n    // run the code to execute enabled feature for given user\n} else {\n    // run the code when feature switched off\n}\n\n\n\n\nTo get a remote config value for specific user:\n\n\nstring myRemoteConfig = await bulletClient.GetFeatureValue(\nmy_test_feature\n, \nmy_user_id\n);\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}\n\n\n\n\nTo get user traits:\n\n\nList\nTrait\n userTraits = await bulletClient.GetTraits(\nmy_user_id\n)\nif (userTraits != null \n userTraits) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}\n\n\n\n\nTo get a specific user trait:\n\n\nTrait userTrait = await bulletClient.GetTrait(\nmy_user_id\n, \ncookies_key\n);\nif (userTrait != null) {\n    // run the code to use user trait\n} else {\n    // run the code without user trait\n}\n\n\n\n\nTo get filtered user traits:\n\n\nList\nTrait\n userTraits = await bulletClient.GetTraits(\nmy_user_id\n, new List\nstring\n { \nspecific_key\n, /* rest of elements */ });\nif (userTraits != null) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}\n\n\n\n\nTo set or update a user trait:\n\n\nTrait userTrait = await bulletClient.SetTrait(\nmy_user_id\n, \nmy_user_trait\n, \nblue\n);\n\n\n\n\nTo retrieve a user identity (both features and traits):\n\n\nIdentity userIdentity = await bulletClient.GetUserIdentity(\nmy_user_id\n);\nif (userIdentity != null) {\n  // Run the code to use user identity i.e. userIdentity.flags or userIdentity.traits\n}\n\n\n\n\nContributing\n\n\nPlease read \nCONTRIBUTING.md\n for details on our code of conduct, and the process for submitting pull requests to us.\n\n\nGetting Help\n\n\nIf you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.\n\n\nGet in touch\n\n\nIf you have any questions about our projects you can email \nprojects@solidstategroup.com\n.", 
            "title": ".Net"
        }, 
        {
            "location": "/clients/dotnet/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/dotnet/#quick-setup", 
            "text": "The client library is available from NuGet and can be added to your project by many tools. You can find the package here  https://www.nuget.org/packages/BulletTrain/", 
            "title": "Quick Setup"
        }, 
        {
            "location": "/clients/dotnet/#usage", 
            "text": "Retrieving feature flags for your project  For full documentation visit  https://docs.bullet-train.io  Sign Up and create account at  https://bullet-train.io/  In your application initialise the Bullet Train client with your environment API key  BulletTrainClient bulletClient = new BulletTrainClient() {\n  environmentKey:  environment-key-here \n};  To check if a feature flag exists and is enabled:  bool featureEnabled = await bulletClient.HasFeatureFlag( my_test_feature );\nif (featureEnabled) {\n    // run the code to execute enabled feature\n} else {\n    // run the code if feature switched off\n}  To get a remote config feature value:  string myRemoteConfig = await bulletClient.GetFeatureValue( my_test_feature );\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}  Identifying users  Identifying users allows you to target specific users from the  Bullet Train dashboard .  To check if a feature exists and is enabled for a specific user:  bool featureEnabled = await bulletClient.HasFeatureFlag( my_test_feature ,  my_user_id );\nif (featureEnabled) {\n    // run the code to execute enabled feature for given user\n} else {\n    // run the code when feature switched off\n}  To get a remote config value for specific user:  string myRemoteConfig = await bulletClient.GetFeatureValue( my_test_feature ,  my_user_id );\nif (myRemoteConfig != null) {\n    // run the code to use remote config value\n} else {\n    // run the code without remote config\n}  To get user traits:  List Trait  userTraits = await bulletClient.GetTraits( my_user_id )\nif (userTraits != null   userTraits) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}  To get a specific user trait:  Trait userTrait = await bulletClient.GetTrait( my_user_id ,  cookies_key );\nif (userTrait != null) {\n    // run the code to use user trait\n} else {\n    // run the code without user trait\n}  To get filtered user traits:  List Trait  userTraits = await bulletClient.GetTraits( my_user_id , new List string  {  specific_key , /* rest of elements */ });\nif (userTraits != null) {\n    // run the code to use user traits\n} else {\n    // run the code without user traits\n}  To set or update a user trait:  Trait userTrait = await bulletClient.SetTrait( my_user_id ,  my_user_trait ,  blue );  To retrieve a user identity (both features and traits):  Identity userIdentity = await bulletClient.GetUserIdentity( my_user_id );\nif (userIdentity != null) {\n  // Run the code to use user identity i.e. userIdentity.flags or userIdentity.traits\n}", 
            "title": "Usage"
        }, 
        {
            "location": "/clients/dotnet/#contributing", 
            "text": "Please read  CONTRIBUTING.md  for details on our code of conduct, and the process for submitting pull requests to us.", 
            "title": "Contributing"
        }, 
        {
            "location": "/clients/dotnet/#getting-help", 
            "text": "If you encounter a bug or feature request we would like to hear about it. Before you submit an issue please search existing issues in order to prevent duplicates.", 
            "title": "Getting Help"
        }, 
        {
            "location": "/clients/dotnet/#get-in-touch", 
            "text": "If you have any questions about our projects you can email  projects@solidstategroup.com .", 
            "title": "Get in touch"
        }, 
        {
            "location": "/clients/rest/", 
            "text": "Direct API Access\n\n\nYou can access the API directly with tools like \ncurl\n or \nhttpie\n, or with clients for languages that we do not currently have SDKs for.\n\n\nAPI Explorer\n\n\nYou can view the API via Swagger at \nhttps://api.bullet-train.io/api/v1/docs/\n.\n\n\nEnvironment Key\n\n\nPublicly accessible API calls need to have an environment key supplied with each request. This is provided as an HTTP header, with the name \nX-Environment-Key\n and the value of the environment API key that you can find within the Bullet Train administrative area. \n\n\nCurl Example\n\n\ncurl 'https://api.bullet-train.io/api/v1/flags/' -H 'X-Environment-Key: TijpMX6ajA7REC4bf5suYg'\n\n\n\n\nhttpie Example\n\n\nhttp GET 'https://api.bullet-train.io/api/v1/flags/' 'X-Environment-Key':'TijpMX6ajA7REC4bf5suYg'", 
            "title": "REST"
        }, 
        {
            "location": "/clients/rest/#direct-api-access", 
            "text": "You can access the API directly with tools like  curl  or  httpie , or with clients for languages that we do not currently have SDKs for.", 
            "title": "Direct API Access"
        }, 
        {
            "location": "/clients/rest/#api-explorer", 
            "text": "You can view the API via Swagger at  https://api.bullet-train.io/api/v1/docs/ .", 
            "title": "API Explorer"
        }, 
        {
            "location": "/clients/rest/#environment-key", 
            "text": "Publicly accessible API calls need to have an environment key supplied with each request. This is provided as an HTTP header, with the name  X-Environment-Key  and the value of the environment API key that you can find within the Bullet Train administrative area.", 
            "title": "Environment Key"
        }, 
        {
            "location": "/clients/rest/#curl-example", 
            "text": "curl 'https://api.bullet-train.io/api/v1/flags/' -H 'X-Environment-Key: TijpMX6ajA7REC4bf5suYg'", 
            "title": "Curl Example"
        }, 
        {
            "location": "/clients/rest/#httpie-example", 
            "text": "http GET 'https://api.bullet-train.io/api/v1/flags/' 'X-Environment-Key':'TijpMX6ajA7REC4bf5suYg'", 
            "title": "httpie Example"
        }
    ]
}